<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Angular, Vue, React数据双向绑定原理</title>
      <link href="/2019/01/09/Angular-Vue-React%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
      <url>/2019/01/09/Angular-Vue-React%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="note default"><p><a href="https://www.jianshu.com/p/0520e1e8d23d" target="_blank" rel="noopener">angular,vue,react数据双向绑定原理分析</a><br><a href="https://www.cnblogs.com/samsara-yx/p/9456638.html" target="_blank" rel="noopener">angular 双向数据绑定与vue数据的双向数据绑定</a></p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>细说table和div布局的优缺点</title>
      <link href="/2019/01/09/%E7%BB%86%E8%AF%B4table%E5%92%8Cdiv%E5%B8%83%E5%B1%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
      <url>/2019/01/09/%E7%BB%86%E8%AF%B4table%E5%92%8Cdiv%E5%B8%83%E5%B1%80%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>一开始接触前端时候使用的是table布局，当时感觉table布局真的很方便，并且可以使用DW软件来自动生成；但是随着所开发的页面复杂化和对性能的要求越来越高，table布局渐渐的展现出来它的不足了；现在table的布局方式已经被div+css布局方式替代了，但是也不排除市面上还有一些老系统仍然是table布局；下面针对这两种布局方式（<strong><em>table布局</em></strong>和<strong><em>div+css布局</em></strong>）来详细的讲解一下它们各自的优缺点。如有描述不正确，欢迎留言指正。</p><h2 id="div-css布局优缺点"><a href="#div-css布局优缺点" class="headerlink" title="div+css布局优缺点"></a>div+css布局优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>可以通过css样式给框架进行功能强大的属性设置以及给网页的局部进行任意的定位，制作出来的页面浏览速度较快，</li><li>页面的风格可以通过修改单独的css文件进行随意的修改和更新。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>对于开发者来说可能不熟悉css的开发人员来说上手比较慢，开发时间可能比较长。</p><h2 id="table布局优缺点"><a href="#table布局优缺点" class="headerlink" title="table布局优缺点"></a>table布局优缺点</h2><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li>开发时间短（使用DW开发速度快）。</li><li>纯table各浏览器不会有兼容问题。</li><li>内容可自适应。</li><li>在搜索引擎排名能靠前。</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li>如果布局变更，需要重新开发，灵活性比较差。</li><li>如果table里有div ul 等，可能会出现浏览器兼容问题。</li><li>加载速度慢<div class="note primary"><p>由于html文件中的table标签的浏览速度较慢，所以，使用嵌套表格的方法来布局网页框架会使网页浏览的速度变慢。因为table是中的内容是自适应的，为了自适应，它要计算嵌套最深的节点以满足自适应，所以有可能会有一断时间出现空白才显示。所以是会有问题的。 </p></div></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.cnblogs.com/nwj-0613/p/4775854.html" target="_blank" rel="noopener">HTML中table和div布局的优缺点</a></p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo-admin随时随地发布hexo博客</title>
      <link href="/2019/01/09/%E4%BD%BF%E7%94%A8hexo-admin%E9%9A%8F%E6%97%B6%E9%9A%8F%E5%9C%B0%E5%8F%91%E5%B8%83hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/01/09/%E4%BD%BF%E7%94%A8hexo-admin%E9%9A%8F%E6%97%B6%E9%9A%8F%E5%9C%B0%E5%8F%91%E5%B8%83hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>之前通过github page和hexo框架搭建了一个博客系统，一开始在自己的电脑上写完hexo博客，然后敲点命令发布到github上，过程感觉不算太麻烦；但是如果当我们换一台电脑或者是你在公司或者网吧的时候一时兴起想写博客，那么你就必须要在手头上的电脑中配置hexo环境所需要的一系列依赖（其中的麻烦你懂的），才能写博客发布你的博客。为了能够更方便的随时随地都能写博客发布博客,我使用hexo-admin搭建了一个hexo博客后台管理系统，下面我就来详细的讲解一下我的搭建流程，希望能够给大家带来帮助，如果描述有误，欢迎大家留言指正。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>本人自己有一台阿里云服务器，但是考虑到稳定性和安全性等问题，最后将hexo的静态页面部署github-pages上。现在我的需求有：</p><ol><li>拥有在线编辑博客的后台</li><li>本地机器同时也可以编辑发布博客</li><li>本地和线上要保持同步</li><li>由于我使用的是next的主题，也希望修改的主题功能也可以方便的同步</li></ol><h2 id="我所用到的工具"><a href="#我所用到的工具" class="headerlink" title="我所用到的工具"></a>我所用到的工具</h2><ol><li>hexo-admin</li><li>阿里云服务器</li><li>coding.net一个可以创建免费私有仓库的git服务器</li><li>github page</li></ol><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><ol><li>首先安装hexo-admin管理包，我的博客工程名称为blog，我就以blog来说，进入blog文件夹通过<code>npm install hexo-admin --save</code>（如果被墙可以使用<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM镜像</a>）或者是<code>yarn add hexo-admin --save</code>（不懂yarn命令的可以自行百度）来安装hexo-admin。安装成功后我们可以使用命令<code>hexo s -d</code>来启动博客，之后访问‘localhost:4000/admin’打开博客管理系统，界面如下图：<img src="/2019/01/09/使用hexo-admin随时随地发布hexo博客/hexo_admin.png"></li><li>本地搭建后台管理系统成功，但是这样每个人都能访问我们的管理系统，因此我们需要为管理系统添加登录功能；为了实现该功能我们需要在<code>_config.yml</code>添加hexo-admin的admin选项，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  username: </span><br><span class="line">  password_hash: </span><br><span class="line">  secret: my super secret phrase</span><br><span class="line">  deployCommand: &apos;./hexo-deploy.sh&apos;</span><br></pre></td></tr></table></figure><code>username</code>是用户名可以自己任意起名，<code>password_hash</code>需要在步骤1中打开的博客管理系统中的Settings中获取，如下图：<img src="/2019/01/09/使用hexo-admin随时随地发布hexo博客/hexo_admin1.png"></li><li></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><div class="note default"></div> hehe</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS左边固定右边自适应布局的几种方式</title>
      <link href="/2019/01/06/css%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/01/06/css%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>在我们平常的布局中两栏布局是很常见的一种布局方式，并且对于两栏布局的实现方式也是层出不穷；之前忙于工作和happy，没有时间去整理这方面知识，今天抽空总结一下，一方面可以提升和巩固自己的知识，二者也可以分享给大伙儿，更易于大家的理解和掌握。由于自己的水平有限，如果文章有任何问题，欢迎大家积极留言评论指正。</p><h2 id="1-根据css计算属性calc和display-inline-block实现左边固定右边自适应布局"><a href="#1-根据css计算属性calc和display-inline-block实现左边固定右边自适应布局" class="headerlink" title="1. 根据css计算属性calc和display:inline-block实现左边固定右边自适应布局"></a>1. 根据css计算属性calc和display:inline-block实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/2wq24y4wnp" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p> 在display:inline-block中，如何有换行符和空格符的话，就会产生inline-block元素之前有间隙，因此我们在父元素中把字符的font-size设为0。关于inlin-block去间隙问题可以参考：<a href="https://blog.csdn.net/gladys_1111/article/details/77279985" target="_blank" rel="noopener">inline-block布局产生间隙的原因及解决办法（水平、垂直）</a>。</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3> <img src="/2019/01/06/css两栏布局的几种方式/calc.png"><h2 id="2-根据css计算属性calc和display-float实现左边固定右边自适应布局"><a href="#2-根据css计算属性calc和display-float实现左边固定右边自适应布局" class="headerlink" title="2. 根据css计算属性calc和display:float实现左边固定右边自适应布局"></a>2. 根据css计算属性calc和display:float实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/1zr2zj18o4" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h2 id="3-根据float和margin实现左边固定右边自适应布局"><a href="#3-根据float和margin实现左边固定右边自适应布局" class="headerlink" title="3. 根据float和margin实现左边固定右边自适应布局"></a>3. 根据float和margin实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/yv48893om1" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h3><p>因为左边是浮动布局，右边是块布局，因此右边的div会自动充满一行；如果右边不设置margin，那么右边的一部分就和左边重叠，加入我们要给右边要设置左边边框，那么就达不到我们想要的效果。因此我们通过设置margin-left为左边的宽度，使得左右刚好不重叠。</p><h2 id="4-根据float和overflow实现左边固定右边自适应布局"><a href="#4-根据float和overflow实现左边固定右边自适应布局" class="headerlink" title="4. 根据float和overflow实现左边固定右边自适应布局"></a>4. 根据float和overflow实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/jp3x90vml3" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-2"><a href="#Note-2" class="headerlink" title="Note"></a>Note</h3><p>这种实现方式感觉和上面一种实现方式很像，区别就是上面通过margin来处理重叠，而本方法是通过overflow：hidden来处理重叠，其原理是如果元素设置了overflow:hidden，这样就使它成为了一个BFC容器，因为BFC有个规则是：<strong>BFC的区域不会与float box重叠</strong>，正好是我想要的效果，关于BFC的特性可以参考：<a href="https://yaojunblog.cn/2018/12/12/BFC%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">BFC到底是什么</a>，这种方式如果左边不设置宽度<strong>就可以实现左边自动撑开右边自适应布局</strong>。</p><h2 id="5-根据absolute和margin实现左边固定右边自适应布局"><a href="#5-根据absolute和margin实现左边固定右边自适应布局" class="headerlink" title="5. 根据absolute和margin实现左边固定右边自适应布局"></a>5. 根据absolute和margin实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/4xp8o28vo9" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-3"><a href="#Note-3" class="headerlink" title="Note"></a>Note</h3><p>这种方式和float+margin方式很像，但是需要注意的是absolute的布局的父元素是非static元素。因此如果要使用这种方式，就需要把父元素设置成非static布局。</p><h2 id="6-仅根据absolute-left实现左边固定右边自适应布局"><a href="#6-仅根据absolute-left实现左边固定右边自适应布局" class="headerlink" title="6. 仅根据absolute+left实现左边固定右边自适应布局"></a>6. 仅根据absolute+left实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/2p8n6o0zyp" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-4"><a href="#Note-4" class="headerlink" title="Note"></a>Note</h3><p>通过absolute布局让容器脱离的文档流，之后通过left属性进行偏移。</p><h2 id="7-display-table布局实现左边固定右边自适应布局"><a href="#7-display-table布局实现左边固定右边自适应布局" class="headerlink" title="7. display:table布局实现左边固定右边自适应布局"></a>7. display:table布局实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/kpj95xqmr" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-5"><a href="#Note-5" class="headerlink" title="Note"></a>Note</h3><p>通过display:table可以使得元素拥有table的特性，因此可以通过table特性来达到其效果；其实我们也可以通过使用真正的table标签来实现其功能，在这里我就不累述了，有兴趣大家可以自己去实现以下。</p><h2 id="8-flex布局实现左边固定右边自适应布局"><a href="#8-flex布局实现左边固定右边自适应布局" class="headerlink" title="8. flex布局实现左边固定右边自适应布局"></a>8. flex布局实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/wo44m0zkol" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-6"><a href="#Note-6" class="headerlink" title="Note"></a>Note</h3><p>flex布局正在改变传统的布局方式，让布局变得更简单。如果你对flex布局还是不很了解，请参考：<a href="https://www.w3cplus.com/css3/understanding-flexbox-everything-you-need-to-know.html" target="_blank" rel="noopener">理解Flexbox：你需要知道的一切</a></p><h3 id="兼容性-1"><a href="#兼容性-1" class="headerlink" title="兼容性"></a>兼容性</h3><img src="/2019/01/06/css两栏布局的几种方式/flex.png"><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.cnblogs.com/wangzhenyu666/p/7904522.html" target="_blank" rel="noopener">css实现两栏布局，左侧固定宽，右侧自适应的7中方法</a><br><a href="https://blog.csdn.net/gladys_1111/article/details/77279985" target="_blank" rel="noopener">inline-block布局产生间隙的原因及解决办法（水平、垂直）</a></p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue双向绑定原理笔录</title>
      <link href="/2019/01/01/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86%E7%AC%94%E5%BD%95/"/>
      <url>/2019/01/01/vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86%E7%AC%94%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="闲言你好你真的很好"><a href="#闲言你好你真的很好" class="headerlink" title="闲言你好你真的很好"></a>闲言你好你真的很好</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.cnblogs.com/libin-1/p/6893712.html" target="_blank" rel="noopener"><font color="red">vue的双向绑定原理及实现</font></a></p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>location.hash笔录</title>
      <link href="/2019/01/01/location-hash%E7%AC%94%E5%BD%95/"/>
      <url>/2019/01/01/location-hash%E7%AC%94%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>在没有认识location.hash的时候，我每次实现在某个页面定位到特定的可视区域的时，都是通过scrollTop属性来实现。一次偶然的机会让我接触到了location.hash这个属性，才知道可以通过它很轻松的搞定我刚刚提到的需求；经过我进一步对location.hash的研究和了解，才知道这个属性的功能之强大，下面结合我所学的知识来总结一下我所认识的location.hash。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在浏览器的url中，如果存在“#”，那么第一个“#”字符本身以及它后面的任何字符称之为hash，可通过window.location.hash属性读取，并且“#”后面的字符会被浏览器解读为位置标识符。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li><strong>“#”后面的值为位置标识符，它可以使得页面滚动到特定区域</strong>。比如说url为：<br> <code>http://www.example.com/index.html#print</code><br> print代表着index.html页面的位置，当浏览器解析该url时候，就会自动将print位置滚动到可视区域。<br> 为网页位置指定标识符，有两中方式：<br> 一. 使用锚点，比如<code>&lt;a name=&quot;print&quot;&gt;&lt;/a&gt;</code><br> 二. 使用id属性，比如<code>&lt;div id=&quot;print&quot;&gt;</code><br> 这样浏览器会自动将含有该锚点或者id的标签滚动到可视区域。</li><li><strong>hash（#）虽然出现在url中，但不会被包括在http请求中，它是用来指导浏览器动作的，对服务器端完全无用，因此，改变hash不会重新加载页面</strong>。比如说通过url访问：<code>https://www.baidu.com/#123</code>, 查看该请求头，如下图所示：<br><img src="/images/pasted-1.png" alt="upload successful">发现hash已经被浏览器请求忽略，已经不存在“#123”。</li><li><strong>可以为hash的改变添加HTML5的监听事件</strong>, <code>window.addEventListener(&quot;hashchange&quot;,funcRef,false)</code></li><li><strong>每一次改变hash(window.location.hash)，都会在浏览器访问历史中增加一个记录</strong>。</li></ol><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ol><li>基于hash位置标识符的特性，可以实现某些页面的置顶和置底功能等。</li><li>基于上面hash的2，3，4特性，可以实现SPA（单页面应用程序）的路由功能；实现原理可以参考大漠老是的<a href="https://www.w3cplus.com/javascript/front-end-routing.html" target="_blank" rel="noopener">前端路由一探</a>。<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.cnblogs.com/yeer/archive/2013/01/21/2869827.html" target="_blank" rel="noopener">location.hash详解</a><br><a href="https://segmentfault.com/a/1190000014822765" target="_blank" rel="noopener">vue:路由实现原理</a></p></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue路由实现原理</title>
      <link href="/2018/12/30/vue%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2018/12/30/vue%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.w3cplus.com/javascript/front-end-routing.html" target="_blank" rel="noopener">前端路由一探</a><br><a href="https://www.cnblogs.com/yeer/archive/2013/01/21/2869827.html" target="_blank" rel="noopener">location.hash详解</a><br><a href="https://segmentfault.com/a/1190000014822765" target="_blank" rel="noopener">vue:路由实现原理</a></p></div> ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js继承那些事儿</title>
      <link href="/2018/12/29/js%E7%BB%A7%E6%89%BF%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2018/12/29/js%E7%BB%A7%E6%89%BF%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>之前在公司做项目的时候用到了ES6中class的继承特性，和java等其它语言一样，只需要使用extends关键字就可以轻松搞定继承。那么ES6的继承原理和之前JS的继承原理是一样的吗？带着心中的疑惑，我通过查找相关资料和自己的总结写出了这篇文章。</p><h2 id="ES5继承"><a href="#ES5继承" class="headerlink" title="ES5继承"></a>ES5继承</h2><p>在js世界里，继承的方式有很多，有<strong>原型链继承</strong>、<strong>构造继承</strong>、<strong>实例继承</strong>、<strong>拷贝继承</strong>、<strong>组合继承</strong>和<strong>寄生组合继承</strong>等，它们的原理和优缺点可以参考<a href="https://www.cnblogs.com/humin/p/4556820.html" target="_blank" rel="noopener">JS实现继承的几种方式</a>，其中寄生组合继承是最优的一种继承方式，下面我重点介绍一下它的原理。<br><strong>寄生组合继承</strong>：主要通过<strong>原型链继承</strong>和<strong>构造继承</strong>进行结合，之后通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性。废话不多说，直接上代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个动物类</span><br><span class="line">function Animal (name) &#123;</span><br><span class="line">// 属性</span><br><span class="line">this.name = name || &apos;Animal&apos;;</span><br><span class="line">// 实例方法</span><br><span class="line">this.sleep = function()&#123;</span><br><span class="line">    console.log(this.name + &apos;正在睡觉！&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 原型方法</span><br><span class="line">Animal.prototype.eat = function(food) &#123;</span><br><span class="line">console.log(this.name + &apos;正在吃：&apos; + food);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Cat(name)&#123;</span><br><span class="line">Animal.call(this);</span><br><span class="line">this.name = name || &apos;Tom&apos;;</span><br><span class="line">&#125;</span><br><span class="line">(function()&#123;</span><br><span class="line">// 创建一个没有实例方法的类</span><br><span class="line">var Super = function()&#123;&#125;;</span><br><span class="line">Super.prototype = Animal.prototype;</span><br><span class="line">//将实例作为子类的原型</span><br><span class="line">Cat.prototype = new Super();</span><br><span class="line">Cat.prototype.constructor = Cat;</span><br><span class="line">&#125;)();</span><br><span class="line">// Test Code</span><br><span class="line">var cat = new Cat();</span><br><span class="line">console.log(cat.name);</span><br><span class="line">console.log(cat.sleep());</span><br><span class="line">console.log(cat instanceof Animal); // true</span><br><span class="line">console.log(cat instanceof Cat); //true</span><br><span class="line"> </span><br></pre></td></tr></table></figure><br> <strong>Note:</strong> <em>对于上面的代码，不知道有没有人和我产生同样的疑惑：为什么不直接把Cat.prototype = Animal.prototype呢？这样cat的实例不就可以拿到Animal中的原型属性或者方法了嘛，为什么需要通过实例化对象的方式呢？其实是因为如果使用Cat.prototype = Animal.prototype的方式，那么我如果通过Cat.prototype去增加一些原型属性和方法的话，那么继承Animal的其它子类也会相应的增加，因为Animal的子类共用一个原型，所以是我们不希望看到的。如果通过实例化对象，那么Animal的每个子类都有自己独立的原型，并且这个原型也指向了Animal的原型。</em><br> 由于上面的代码没有用到ES5中的新特新，下面我使用ES5Object.create和Object.defineProperties的特性（不懂的可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">MDN web docs</a>）重写改写代码，最终ES5寄生组合继承的代码如下。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个动物类</span><br><span class="line">function Animal (name) &#123;</span><br><span class="line">// 属性</span><br><span class="line">this.name = name || &apos;Animal&apos;;</span><br><span class="line">// 实例方法</span><br><span class="line">this.sleep = function()&#123;</span><br><span class="line">    console.log(this.name + &apos;正在睡觉！&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 原型方法</span><br><span class="line">Animal.prototype.eat = function(food) &#123;</span><br><span class="line">console.log(this.name + &apos;正在吃：&apos; + food);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Cat(name)&#123;</span><br><span class="line">Animal.call(this);</span><br><span class="line">this.name = name || &apos;Tom&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过Object.create创建一个对象，</span><br><span class="line">并且这个对象的原型指向了Super.prototype,</span><br><span class="line">之后把这个对象增加了一个属性constructor,值为Cat</span><br><span class="line">Cat.prototpye = Object.create(Super.prototype,&#123;</span><br><span class="line">    constructor: &#123;</span><br><span class="line">        value: Cat,</span><br><span class="line">        enumerable: false,</span><br><span class="line">        writable: true,</span><br><span class="line">        configurable: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Test Code</span><br><span class="line">var cat = new Cat();</span><br><span class="line">console.log(cat.name);</span><br><span class="line">console.log(cat.sleep());</span><br><span class="line">console.log(cat instanceof Animal); // true</span><br><span class="line">console.log(cat instanceof Cat); //true</span><br><span class="line"> </span><br></pre></td></tr></table></figure><br>看完代码之后，通过一张图来系统性的理解一下ES5的继承原理</p><img src="/2018/12/29/js继承那些事儿/es5.JPEG"><h2 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h2><p>如果想了解ES6的class的继承方式，就必须了解ES6代码通过babel转码后的源码，下面通过ES6创建一个class类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Parent &#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    speakSomething()&#123;</span><br><span class="line">        console.log(&quot;I can speek chinese&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>经过转码后<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var _createClass = function () &#123;</span><br><span class="line">    function defineProperties(target, props) &#123;</span><br><span class="line">        for (var i = 0; i &lt; props.length; i++) &#123;</span><br><span class="line">            var descriptor = props[i];</span><br><span class="line">            descriptor.enumerable = descriptor.enumerable || false;</span><br><span class="line">            descriptor.configurable = true;</span><br><span class="line">            if (&quot;value&quot; in descriptor) descriptor.writable = true;</span><br><span class="line">            Object.defineProperty(target, descriptor.key, descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return function (Constructor, protoProps, staticProps) &#123;</span><br><span class="line">        if (protoProps) defineProperties(Constructor.prototype, protoProps);</span><br><span class="line">        if (staticProps) defineProperties(Constructor, staticProps);</span><br><span class="line">        return Constructor;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">function _classCallCheck(instance, Constructor) &#123;</span><br><span class="line">    if (!(instance instanceof Constructor)) &#123;</span><br><span class="line">        throw new TypeError(&quot;Cannot call a class as a function&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Parent = function () &#123;</span><br><span class="line">    function Parent(name, age) &#123;</span><br><span class="line">        _classCallCheck(this, Parent);</span><br><span class="line"></span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _createClass(Parent, [&#123;</span><br><span class="line">        key: &quot;speakSomething&quot;,</span><br><span class="line">        value: function speakSomething() &#123;</span><br><span class="line">            console.log(&quot;I can speek chinese&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    return Parent;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><br>可以看到ES6类的底层还是通过构造函数去创建的。通过ES6创建的类，是不允许你直接调用的。在ES5中，构造函数是可以直接运行的，比如Parent()。但是在ES6就不行。我们可以看到转码的构造函数中有_classCallCheck(this, Parent)语句,这句话是防止你通过构造函数直接运行的。你直接在ES6运行Parent(),这是不允许的,ES6中抛出Class constructor Parent cannot be invoked without ‘new’错误。转码后的会抛出Cannot call a class as a function.我觉得这样的规范挺好的，能够规范化类的使用方式。<br>转码中_createClass方法，它调用Object.defineProperty方法去给新创建的Parent添加各种属性。defineProperties(Constructor.prototype, protoProps)是给原型添加属性。如果你有静态属性，会直接添加到构造函数上defineProperties(Constructor, staticProps)。但是貌似并没有用到，下面可以证明。这两个流程走下来，其实就创建了一个类。</p><p>上面讲的是创建一个类的过程，那ES6如何实现继承的呢？还是上面的例子，这次我们给Parent添加静态属性，原型属性，内部属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Parent &#123;</span><br><span class="line">    static height = 12</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    speakSomething()&#123;</span><br><span class="line">        console.log(&quot;I can speek chinese&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.color = &apos;yellow&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//定义子类，继承父类</span><br><span class="line">class Child extends Parent &#123;</span><br><span class="line">    static width = 18</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    coding()&#123;</span><br><span class="line">        console.log(&quot;I can code JS&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var c = new Child(&quot;job&quot;,30);</span><br><span class="line">c.coding()</span><br></pre></td></tr></table></figure><br>经过babel转码后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var _createClass = function () &#123;</span><br><span class="line">    function defineProperties(target, props) &#123;</span><br><span class="line">        for (var i = 0; i &lt; props.length; i++) &#123;</span><br><span class="line">            var descriptor = props[i];</span><br><span class="line">            descriptor.enumerable = descriptor.enumerable || false;</span><br><span class="line">            descriptor.configurable = true;</span><br><span class="line">            if (&quot;value&quot; in descriptor) descriptor.writable = true;</span><br><span class="line">            Object.defineProperty(target, descriptor.key, descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return function (Constructor, protoProps, staticProps) &#123;</span><br><span class="line">        if (protoProps) defineProperties(Constructor.prototype, protoProps);</span><br><span class="line">        if (staticProps) defineProperties(Constructor, staticProps);</span><br><span class="line">        return Constructor;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">function _possibleConstructorReturn(self, call) &#123;</span><br><span class="line">    if (!self) &#123;</span><br><span class="line">        throw new ReferenceError(&quot;this hasn&apos;t been initialised - super() hasn&apos;t been called&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return call &amp;&amp; (typeof call === &quot;object&quot; || typeof call === &quot;function&quot;) ? call : self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _inherits(subClass, superClass) &#123;</span><br><span class="line">    if (typeof superClass !== &quot;function&quot; &amp;&amp; superClass !== null) &#123;</span><br><span class="line">        throw new TypeError(&quot;Super expression must either be null or a function, not &quot; + typeof superClass);</span><br><span class="line">    &#125;</span><br><span class="line">    subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">        constructor: &#123;</span><br><span class="line">            value: subClass,</span><br><span class="line">            enumerable: false,</span><br><span class="line">            writable: true,</span><br><span class="line">            configurable: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _classCallCheck(instance, Constructor) &#123;</span><br><span class="line">    if (!(instance instanceof Constructor)) &#123;</span><br><span class="line">        throw new TypeError(&quot;Cannot call a class as a function&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Parent = function () &#123;</span><br><span class="line">    function Parent(name, age) &#123;</span><br><span class="line">        _classCallCheck(this, Parent);</span><br><span class="line"></span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _createClass(Parent, [&#123;</span><br><span class="line">        key: &quot;speakSomething&quot;,</span><br><span class="line">        value: function speakSomething() &#123;</span><br><span class="line">            console.log(&quot;I can speek chinese&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    return Parent;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">Parent.height = 12;</span><br><span class="line"></span><br><span class="line">Parent.prototype.color = &apos;yellow&apos;;</span><br><span class="line"></span><br><span class="line">//定义子类，继承父类</span><br><span class="line"></span><br><span class="line">var Child = function (_Parent) &#123;</span><br><span class="line">    _inherits(Child, _Parent);</span><br><span class="line"></span><br><span class="line">    function Child(name, age) &#123;</span><br><span class="line">        _classCallCheck(this, Child);</span><br><span class="line"></span><br><span class="line">        return _possibleConstructorReturn(this, (Child.__proto__ || Object.getPrototypeOf(Child)).call(this, name, age));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _createClass(Child, [&#123;</span><br><span class="line">        key: &quot;coding&quot;,</span><br><span class="line">        value: function coding() &#123;</span><br><span class="line">            console.log(&quot;I can code JS&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    return Child;</span><br><span class="line">&#125;(Parent);</span><br><span class="line"></span><br><span class="line">Child.width = 18;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var c = new Child(&quot;job&quot;, 30);</span><br><span class="line">c.coding();</span><br></pre></td></tr></table></figure><br>我们可以看到，构造类的方法都没变，只是添加了<em>inherits核心方法来实现继承，下面我们把这个方法中主要的两段代码提取出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">        constructor: &#123;</span><br><span class="line">            value: subClass,</span><br><span class="line">            enumerable: false,</span><br><span class="line">            writable: true,</span><br><span class="line">            configurable: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><br>这一段代码可以看出来，就和ES5中寄生组合继承中实现原型链继承的方式一样，这说明ES6实现原型上面的继承和之前js继承原理是一样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</span><br></pre></td></tr></table></figure><br>这段代码中的Object.setPrototypeOf方法可以让一个对象(第一个参数)的隐含指针_proto</em>指向另一个对象（第二个参数），这样处理是因为<br>现代 JavaScript 引擎优化属性访问所带来的特性的关系，更改对象的 [[Prototype]]在各个浏览器和 JavaScript 引擎上都是一个很慢的操作。其在更改继承的性能上的影响是微妙而又广泛的，这不仅仅限于 obj.<strong>proto</strong> = … 语句上的时间花费，而且可能会延伸到任何代码，那些可以访问任何[[Prototype]]已被更改的对象的代码。如果你关心性能，你应该避免设置一个对象的 [[Prototype]]。相反，你应该使用 Object.create()来创建带有你想要的[[Prototype]]的新对象<br>抛开性能，因此我们可以把上面代码简化为 <code>subClass.__proto__ = superClass</code><br>总结下来，_inherits核心思想就是下面两句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subClass.prototype.__proto__ = superClass.prototype</span><br><span class="line">subClass.__proto__ = superClass</span><br></pre></td></tr></table></figure><br>研究完代码，来一张图开森开森</p><img src="/2018/12/29/js继承那些事儿/es6.JPEG"><p>那为什么这样一倒腾，它就实现了继承了呢?<br>首先 subClass.prototype.<strong>proto</strong> = superClass.prototype保证了c instanceof Parent是true,Child的实例可以访问到父类的属性，包括内部属性，以及原型属性。其次，subClass.<strong>proto</strong> = superClass，保证了Child.height也能访问到，也就是静态方法。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.cnblogs.com/humin/p/4556820.html" target="_blank" rel="noopener">js实现继承的几种方式</a><br><a href="https://segmentfault.com/a/1190000014798678" target="_blank" rel="noopener">ES6类以及继承的实现原理</a><br><a href="https://baijiahao.baidu.com/s?id=1593627663270143849&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">两张图看懂ES5和ES6中的继承，值得收藏</a></p></div> ]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> es5 </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>It&#39;s Nap Time</title>
      <link href="/2018/12/29/Lesson-66-md/"/>
      <url>/2018/12/29/Lesson-66-md/</url>
      
        <content type="html"><![CDATA[<h2 id="Mr-Mishima-a-Japanese-tourist-enters-a-bank-in-Milan-Italy-M-Mishima-T-bank-teller"><a href="#Mr-Mishima-a-Japanese-tourist-enters-a-bank-in-Milan-Italy-M-Mishima-T-bank-teller" class="headerlink" title="Mr. Mishima, a Japanese tourist, enters a bank in Milan, Italy.(M=Mishima; T=bank teller)"></a>Mr. Mishima, a Japanese tourist, enters a bank in Milan, Italy.(M=Mishima; T=bank teller)</h2><h2 id="M-Uh-excuse-me…"><a href="#M-Uh-excuse-me…" class="headerlink" title="M: Uh, excuse me…"></a>M: Uh, excuse me…</h2><h2 id="T-Zzzzzz…"><a href="#T-Zzzzzz…" class="headerlink" title="T: Zzzzzz…"></a>T: Zzzzzz…</h2><h2 id="M-EXCUSE-ME"><a href="#M-EXCUSE-ME" class="headerlink" title="M: EXCUSE ME!"></a>M: EXCUSE ME!</h2><h2 id="T-Aggghhh-What-do-you-want-You-scared-the-lift-out-of-time"><a href="#T-Aggghhh-What-do-you-want-You-scared-the-lift-out-of-time" class="headerlink" title="T: Aggghhh! What do you want? You scared the lift out of time!"></a>T: Aggghhh! What do you want? You scared the lift out of time!</h2><h2 id="M-I’d-like-to-cash-a-traveler’s-check-please"><a href="#M-I’d-like-to-cash-a-traveler’s-check-please" class="headerlink" title="M: I’d like to cash a traveler’s check, please."></a>M: I’d like to cash a traveler’s check, please.</h2><h2 id="T-At-this-hour-You-must-be-kidding"><a href="#T-At-this-hour-You-must-be-kidding" class="headerlink" title="T: At this hour? You must be kidding!"></a>T: At this hour? You must be kidding!</h2><h2 id="M-But-it’s-two-in-the-afternoon"><a href="#M-But-it’s-two-in-the-afternoon" class="headerlink" title="M: But it’s two in the afternoon."></a>M: But it’s two in the afternoon.</h2><h2 id="T-That’s-right-and-as-usual-it’s-nap-time-Come-back-at-three-or-four-We-don’t-work-the-same-hours-as-you-do-in-your-country"><a href="#T-That’s-right-and-as-usual-it’s-nap-time-Come-back-at-three-or-four-We-don’t-work-the-same-hours-as-you-do-in-your-country" class="headerlink" title="T: That’s right - and as usual, it’s nap time. Come back at three or four. We don’t work the same hours as you do in your country."></a>T: That’s right - and as usual, it’s nap time. Come back at three or four. We don’t work the same hours as you do in your country.</h2><h2 id="M-But-I-have-to-cash-this-check-I-have-no-cash"><a href="#M-But-I-have-to-cash-this-check-I-have-no-cash" class="headerlink" title="M: But I have to cash this check. I have no cash!"></a>M: But I have to cash this check. I have no cash!</h2><h2 id="D-Don’t-worry-You-won’t-need-any-cash-All-of-Italy-is-asleep-at-the-moment-Zzzzzz…"><a href="#D-Don’t-worry-You-won’t-need-any-cash-All-of-Italy-is-asleep-at-the-moment-Zzzzzz…" class="headerlink" title="D: Don’t worry. You won’t need any cash. All of Italy is asleep at the moment. Zzzzzz….."></a>D: Don’t worry. You won’t need any cash. All of Italy is asleep at the moment. Zzzzzz…..</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Italian Culture</title>
      <link href="/2018/12/29/Lesson-65-md/"/>
      <url>/2018/12/29/Lesson-65-md/</url>
      
        <content type="html"><![CDATA[<h2 id="nbsp-nbsp-nbsp-nbsp-Italy-is-land-of-history-and-culture-And-as-we-all-know-the-ancient-architecture-there-is-breathtaking-Just-as-we-Chinese-are-proud-of-our-history-and-culture-so-are-the-Italians-One-of-their-traditions-is-to-enjoy-a-long-modday-meal-This-lengthy-lunch-can-last-up-to-four-hours-As-you-can-imagine-after-all-the-eating-drinking-and-chatting-they-need-to-take-a-nap"><a href="#nbsp-nbsp-nbsp-nbsp-Italy-is-land-of-history-and-culture-And-as-we-all-know-the-ancient-architecture-there-is-breathtaking-Just-as-we-Chinese-are-proud-of-our-history-and-culture-so-are-the-Italians-One-of-their-traditions-is-to-enjoy-a-long-modday-meal-This-lengthy-lunch-can-last-up-to-four-hours-As-you-can-imagine-after-all-the-eating-drinking-and-chatting-they-need-to-take-a-nap" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;Italy is land of history and culture. And as we all know, the ancient architecture there is breathtaking. Just as we Chinese are proud of our history and culture, so are the Italians. One of their traditions is to enjoy a long modday meal. This lengthy lunch can last up to four hours! As you can imagine, after all the eating, drinking and chatting, they need to take a nap."></a>&nbsp;&nbsp;&nbsp;&nbsp;Italy is land of history and culture. And as we all know, the ancient architecture there is breathtaking. Just as we Chinese are proud of our history and culture, so are the Italians. One of their traditions is to enjoy a long modday meal. This lengthy lunch can last up to four hours! As you can imagine, after all the eating, drinking and chatting, they need to take a nap.</h2><h2 id="nbsp-nbsp-nbsp-nbsp-Well-this-custom-may-be-great-for-the-stomach-but-it’s-not-so-great-for-getting-things-done-If-you-happen-to-be-in-Italy-don’t-be-surprised-if-you-have-to-wait-for-a-long-time-for-the-banks-and-post-offices-to-open"><a href="#nbsp-nbsp-nbsp-nbsp-Well-this-custom-may-be-great-for-the-stomach-but-it’s-not-so-great-for-getting-things-done-If-you-happen-to-be-in-Italy-don’t-be-surprised-if-you-have-to-wait-for-a-long-time-for-the-banks-and-post-offices-to-open" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;Well, this custom may be great for the stomach, but it’s not so great for getting things done. If you happen to be in Italy, don’t be surprised if you have to wait for a long time for the banks and post offices to open."></a>&nbsp;&nbsp;&nbsp;&nbsp;Well, this custom may be great for the stomach, but it’s not so great for getting things done. If you happen to be in Italy, don’t be surprised if you have to wait for a long time for the banks and post offices to open.</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Speaking the Same Language</title>
      <link href="/2018/12/28/Lesson-64-md/"/>
      <url>/2018/12/28/Lesson-64-md/</url>
      
        <content type="html"><![CDATA[<h2 id="Sally-is-talking-with-her-friend-Don-S-Sally-D-Don"><a href="#Sally-is-talking-with-her-friend-Don-S-Sally-D-Don" class="headerlink" title="Sally is talking with her friend, Don.(S=Sally; D=Don)"></a>Sally is talking with her friend, Don.(S=Sally; D=Don)</h2><h2 id="S-Tell-me-Don-How-come-you’re-from-Spain-but-you-can’t-speak-Spanish-very-well"><a href="#S-Tell-me-Don-How-come-you’re-from-Spain-but-you-can’t-speak-Spanish-very-well" class="headerlink" title="S: Tell me, Don. How come you’re from Spain but you can’t speak Spanish very well?"></a>S: Tell me, Don. How come you’re from Spain but you can’t speak Spanish very well?</h2><h2 id="D-It’s-not-my-mother-tongue-My-father-is-Spanish-and-my-mother-is-American-We-usually-speak-English-at-home"><a href="#D-It’s-not-my-mother-tongue-My-father-is-Spanish-and-my-mother-is-American-We-usually-speak-English-at-home" class="headerlink" title="D: It’s not my mother tongue. My father is Spanish and my mother is American. We usually speak English at home."></a>D: It’s not my mother tongue. My father is Spanish and my mother is American. We usually speak English at home.</h2><h2 id="S-Oh-I-see"><a href="#S-Oh-I-see" class="headerlink" title="S: Oh, I see."></a>S: Oh, I see.</h2><h2 id="D-Your-Spanish-is-probably-better-than-mine"><a href="#D-Your-Spanish-is-probably-better-than-mine" class="headerlink" title="D: Your Spanish is probably better than mine."></a>D: Your Spanish is probably better than mine.</h2><h2 id="S-Yes-but-you-speak-English-more-fluently-than-I"><a href="#S-Yes-but-you-speak-English-more-fluently-than-I" class="headerlink" title="S: Yes, but you speak English more fluently than I."></a>S: Yes, but you speak English more fluently than I.</h2><h2 id="D-How-come-Aren’t-you-American"><a href="#D-How-come-Aren’t-you-American" class="headerlink" title="D: How come? Aren’t you American?"></a>D: How come? Aren’t you American?</h2><h2 id="S-Yes-but-my-mother-is-Spanish"><a href="#S-Yes-but-my-mother-is-Spanish" class="headerlink" title="S: Yes, but my mother is Spanish."></a>S: Yes, but my mother is Spanish.</h2><h2 id="D-Don’t-tell-me…"><a href="#D-Don’t-tell-me…" class="headerlink" title="D: Don’t tell me…"></a>D: Don’t tell me…</h2><h2 id="S-That’s-right-We-usually-speak-Spanish-at-home"><a href="#S-That’s-right-We-usually-speak-Spanish-at-home" class="headerlink" title="S: That’s right. We usually speak Spanish at home."></a>S: That’s right. We usually speak Spanish at home.</h2><h2 id="D-It-doesn’t-matter-as-long-as-we-can-communicate"><a href="#D-It-doesn’t-matter-as-long-as-we-can-communicate" class="headerlink" title="D: It doesn’t matter as long as we can communicate."></a>D: It doesn’t matter as long as we can communicate.</h2><h2 id="S-That’s-true"><a href="#S-That’s-true" class="headerlink" title="S: That’s true."></a>S: That’s true.</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note success"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Dying Languages</title>
      <link href="/2018/12/28/Lesson-63-md/"/>
      <url>/2018/12/28/Lesson-63-md/</url>
      
        <content type="html"><![CDATA[<h2 id="nbsp-nbsp-nbsp-nbsp-Today-more-people-than-ever-before-are-speaking-to-each-other-through-satellite-television-cellular-telephones-and-computers-This-means-that-people-from-different-parts-of-the-world-need-to-be-able-to-communicate-in-the-same-langulage-That-language-happens-to-be-English"><a href="#nbsp-nbsp-nbsp-nbsp-Today-more-people-than-ever-before-are-speaking-to-each-other-through-satellite-television-cellular-telephones-and-computers-This-means-that-people-from-different-parts-of-the-world-need-to-be-able-to-communicate-in-the-same-langulage-That-language-happens-to-be-English" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;Today, more people than ever before are speaking to each other through satellite television, cellular telephones and computers. This means that people from different parts of the world need to be able to communicate in the same langulage. That language happens to be English."></a>&nbsp;&nbsp;&nbsp;&nbsp;Today, more people than ever before are speaking to each other through satellite television, cellular telephones and computers. This means that people from different parts of the world need to be able to communicate in the same langulage. That language happens to be English.</h2><h2 id="nbsp-nbsp-nbsp-nbsp-Because-of-this-experts-have-predicted-that-more-than-half-of-the-world’s-6-000-languages-may-die-out-in-the-next-century-Already-almost-all-Californian-Native-American-languages-are-in-danger-of-extinction-They-are-being-swallowed-up-by-English-and-other-languages-It-is-a-pity-but-that-is-one-of-the-prices-of-modernization"><a href="#nbsp-nbsp-nbsp-nbsp-Because-of-this-experts-have-predicted-that-more-than-half-of-the-world’s-6-000-languages-may-die-out-in-the-next-century-Already-almost-all-Californian-Native-American-languages-are-in-danger-of-extinction-They-are-being-swallowed-up-by-English-and-other-languages-It-is-a-pity-but-that-is-one-of-the-prices-of-modernization" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;Because of this, experts have predicted that more than half of the world’s 6,000 languages may die out in the next century. Already almost all Californian Native American languages are in danger of extinction. They are being swallowed up by English and other languages. It is a pity, but that is one of the prices of modernization."></a>&nbsp;&nbsp;&nbsp;&nbsp;Because of this, experts have predicted that more than half of the world’s 6,000 languages may die out in the next century. Already almost all Californian Native American languages are in danger of extinction. They are being swallowed up by English and other languages. It is a pity, but that is one of the prices of modernization.</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note success"><p>赖世雄美语从头学-中级篇（上）</p></div> ]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The City of Song</title>
      <link href="/2018/12/28/Lesson-3-md/"/>
      <url>/2018/12/28/Lesson-3-md/</url>
      
        <content type="html"><![CDATA[<h2 id="nbsp-nbsp-nbsp-nbsp-Listening-to-music-is-the-favorite-pastime-of-many-people-all-over-the-world-This-is-escpecially-true-for-people-living-in-Vienna-the-city-of-song-Being-the-home-of-Mozart-this-city-is-the-birthplace-of-classical-music-and-the-waltz"><a href="#nbsp-nbsp-nbsp-nbsp-Listening-to-music-is-the-favorite-pastime-of-many-people-all-over-the-world-This-is-escpecially-true-for-people-living-in-Vienna-the-city-of-song-Being-the-home-of-Mozart-this-city-is-the-birthplace-of-classical-music-and-the-waltz" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;Listening to music is the favorite pastime of many people all over the world. This is escpecially true for people living in Vienna, the city of song. Being the home of Mozart, this city is the birthplace of classical music and the waltz."></a>&nbsp;&nbsp;&nbsp;&nbsp;Listening to music is the favorite pastime of many people all over the world. This is escpecially true for people living in Vienna, the city of song. Being the home of Mozart, this city is the birthplace of classical music and the waltz.</h2><h2 id="nbsp-nbsp-nbsp-nbsp-Music-fills-the-air-in-Vienna-Going-to-public-concerts-is-often-free-of-charge-And-don’t-forget-Vienna-is-also-home-to-the-world-famous-Vienna-Boys’-Choir-No-wonder-people-say-Austria-is-always-alive-with-the-sound-of-music"><a href="#nbsp-nbsp-nbsp-nbsp-Music-fills-the-air-in-Vienna-Going-to-public-concerts-is-often-free-of-charge-And-don’t-forget-Vienna-is-also-home-to-the-world-famous-Vienna-Boys’-Choir-No-wonder-people-say-Austria-is-always-alive-with-the-sound-of-music" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;Music fills the air in Vienna. Going to public concerts is often free of charge. And don’t forget, Vienna is also home to the world famous Vienna Boys’ Choir. No wonder people say Austria is always alive with the sound of music."></a>&nbsp;&nbsp;&nbsp;&nbsp;Music fills the air in Vienna. Going to public concerts is often free of charge. And don’t forget, Vienna is also home to the world famous Vienna Boys’ Choir. No wonder people say Austria is always alive with the sound of music.</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note success"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to improve Your English</title>
      <link href="/2018/12/27/Lesson-2-md/"/>
      <url>/2018/12/27/Lesson-2-md/</url>
      
        <content type="html"><![CDATA[<h2 id="Mack-is-talking-to-his-frient-Don-M-Mack-D-Don"><a href="#Mack-is-talking-to-his-frient-Don-M-Mack-D-Don" class="headerlink" title="Mack is talking to his frient Don.(M=Mack, D=Don)"></a>Mack is talking to his frient Don.(M=Mack, D=Don)</h2><h2 id="M-Hi-Don-How-are-you-doing-in-your-English-class"><a href="#M-Hi-Don-How-are-you-doing-in-your-English-class" class="headerlink" title="M: Hi, Don! How are you doing in your English class?"></a>M: Hi, Don! How are you doing in your English class?</h2><h2 id="D-Not-so-well-I’m-afraid"><a href="#D-Not-so-well-I’m-afraid" class="headerlink" title="D: Not so well, I’m afraid."></a>D: Not so well, I’m afraid.</h2><h2 id="M-What’s-the-problem"><a href="#M-What’s-the-problem" class="headerlink" title="M: What’s the problem?"></a>M: What’s the problem?</h2><h2 id="D-I’m-not-imporving-Tell-me-how-come-your-English-is-so-good"><a href="#D-I’m-not-imporving-Tell-me-how-come-your-English-is-so-good" class="headerlink" title="D: I’m not imporving. Tell me, how come your English is so good?"></a>D: I’m not imporving. Tell me, how come your English is so good?</h2><h2 id="M-Well-uh…I-have-an-American-girlfriend"><a href="#M-Well-uh…I-have-an-American-girlfriend" class="headerlink" title="M: Well, uh…I have an American girlfriend."></a>M: Well, uh…I have an American girlfriend.</h2><h2 id="D-Aha-That’s-it-Now-I-know-what-to-do-He-runs-off"><a href="#D-Aha-That’s-it-Now-I-know-what-to-do-He-runs-off" class="headerlink" title="D: Aha! That’s it. Now I know what to do.(He runs off.)"></a>D: Aha! That’s it. Now I know what to do.(He runs off.)</h2><h2 id="M-Hey-come-back-I-was-just-kidding"><a href="#M-Hey-come-back-I-was-just-kidding" class="headerlink" title="M: Hey, come back! I was just kidding!"></a>M: Hey, come back! I was just kidding!</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rome Wasn&#39;t Built in a Day</title>
      <link href="/2018/12/26/Lesson-1-md/"/>
      <url>/2018/12/26/Lesson-1-md/</url>
      
        <content type="html"><![CDATA[<h2 id="nbsp-nbsp-nbsp-nbsp-English-is-an-international-language-Therefore-it-is-necessary-for-us-to-learn-it-It-can-be-rewarding-or-just-a-waste-of-time-It’s-up-to-you-It-depends-on-how-you-study-it-Here-are-some-tips-about-learning-English"><a href="#nbsp-nbsp-nbsp-nbsp-English-is-an-international-language-Therefore-it-is-necessary-for-us-to-learn-it-It-can-be-rewarding-or-just-a-waste-of-time-It’s-up-to-you-It-depends-on-how-you-study-it-Here-are-some-tips-about-learning-English" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;English is an international language. Therefore, it is necessary for us to learn it. It can be rewarding or just a waste of time. It’s up to you. It depends on how you study it. Here are some tips about learning English."></a>&nbsp;&nbsp;&nbsp;&nbsp;English is an international language. Therefore, it is necessary for us to learn it. It can be rewarding or just a waste of time. It’s up to you. It depends on how you study it. Here are some tips about learning English.</h2><h2 id="nbsp-nbsp-nbsp-nbsp-First-don’t-be-afraid-to-make-mistakes-You-will-learn-form-them-Second-you-must-not-be-shy-Be-thick-skinned-and-speak-up"><a href="#nbsp-nbsp-nbsp-nbsp-First-don’t-be-afraid-to-make-mistakes-You-will-learn-form-them-Second-you-must-not-be-shy-Be-thick-skinned-and-speak-up" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;First, don’t be afraid to make mistakes. You will learn form them. Second, you must not be shy. Be thick-skinned and speak up!"></a>&nbsp;&nbsp;&nbsp;&nbsp;First, don’t be afraid to make mistakes. You will learn form them. Second, you must not be shy. Be thick-skinned and speak up!</h2><h2 id="nbsp-nbsp-nbsp-nbsp-Finally-you-must-be-patient-Remember-“Rome-wasn’t-built-in-a-day-”"><a href="#nbsp-nbsp-nbsp-nbsp-Finally-you-must-be-patient-Remember-“Rome-wasn’t-built-in-a-day-”" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;Finally, you must be patient. Remember, “Rome wasn’t built in a day.”"></a>&nbsp;&nbsp;&nbsp;&nbsp;Finally, you must be patient. Remember, “Rome wasn’t built in a day.”</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同花顺一面</title>
      <link href="/2018/12/26/%E5%90%8C%E8%8A%B1%E9%A1%BA%E4%B8%80%E9%9D%A2/"/>
      <url>/2018/12/26/%E5%90%8C%E8%8A%B1%E9%A1%BA%E4%B8%80%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><h2 id="vue的路由机制，为什么使用路由"><a href="#vue的路由机制，为什么使用路由" class="headerlink" title="vue的路由机制，为什么使用路由"></a>vue的路由机制，为什么使用路由</h2><h2 id="ES5和ES6继承的区别"><a href="#ES5和ES6继承的区别" class="headerlink" title="ES5和ES6继承的区别"></a>ES5和ES6继承的区别</h2><h2 id="Angular的双向绑定和VUE的双向绑定的区别"><a href="#Angular的双向绑定和VUE的双向绑定的区别" class="headerlink" title="Angular的双向绑定和VUE的双向绑定的区别"></a>Angular的双向绑定和VUE的双向绑定的区别</h2><h2 id="一个页面A嵌入了一个iframe页面B，在页面B中有一个按钮，如何点击这个按钮来使得A页面跳转到一个新的页面"><a href="#一个页面A嵌入了一个iframe页面B，在页面B中有一个按钮，如何点击这个按钮来使得A页面跳转到一个新的页面" class="headerlink" title="一个页面A嵌入了一个iframe页面B，在页面B中有一个按钮，如何点击这个按钮来使得A页面跳转到一个新的页面"></a>一个页面A嵌入了一个iframe页面B，在页面B中有一个按钮，如何点击这个按钮来使得A页面跳转到一个新的页面</h2><h2 id="浏览器的hash你是如何了解的"><a href="#浏览器的hash你是如何了解的" class="headerlink" title="浏览器的hash你是如何了解的"></a>浏览器的hash你是如何了解的</h2><h2 id="前端优化问题"><a href="#前端优化问题" class="headerlink" title="前端优化问题"></a>前端优化问题</h2><h2 id="对js-Date对象方法的掌握"><a href="#对js-Date对象方法的掌握" class="headerlink" title="对js Date对象方法的掌握"></a>对js Date对象方法的掌握</h2><h2 id="如何理解MVVM"><a href="#如何理解MVVM" class="headerlink" title="如何理解MVVM"></a>如何理解MVVM</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.w3cplus.com/javascript/front-end-routing.html" target="_blank" rel="noopener">前端路由一探</a><br><a href="https://www.cnblogs.com/yeer/archive/2013/01/21/2869827.html" target="_blank" rel="noopener">location.hash详解</a><br><a href="https://www.cnblogs.com/annika/p/9073572.html" target="_blank" rel="noopener">ES5和ES6继承详解</a></p></div> ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Keep the Change</title>
      <link href="/2018/12/26/Lesson-62-md/"/>
      <url>/2018/12/26/Lesson-62-md/</url>
      
        <content type="html"><![CDATA[<h2 id="Jimmy-is-at-the-Boston-Airport-He-hails-a-taxi-T-taxi-driver-J-Jimmy"><a href="#Jimmy-is-at-the-Boston-Airport-He-hails-a-taxi-T-taxi-driver-J-Jimmy" class="headerlink" title="Jimmy is at the Boston Airport. He hails a taxi.(T=taxi driver; J=Jimmy)"></a>Jimmy is at the Boston Airport. He hails a taxi.(T=taxi driver; J=Jimmy)</h2><h2 id="T-Where-to-buddy"><a href="#T-Where-to-buddy" class="headerlink" title="T: Where to, buddy?"></a>T: Where to, buddy?</h2><h2 id="J-The-Sheraton-Hotel-please"><a href="#J-The-Sheraton-Hotel-please" class="headerlink" title="J: The Sheraton Hotel, please."></a>J: The Sheraton Hotel, please.</h2><h2 id="T-Ok-Is-this-your-first-time-in-Boston"><a href="#T-Ok-Is-this-your-first-time-in-Boston" class="headerlink" title="T: Ok. Is this your first time in Boston?"></a>T: Ok. Is this your first time in Boston?</h2><h2 id="J-Yes-What’s-a-good-place-for-sightseeing"><a href="#J-Yes-What’s-a-good-place-for-sightseeing" class="headerlink" title="J: Yes. What’s a good place for sightseeing?"></a>J: Yes. What’s a good place for sightseeing?</h2><h2 id="T-If-you-have-a-lot-of-time-on-your-hands-you-can-walk-the-Freedom-Trail"><a href="#T-If-you-have-a-lot-of-time-on-your-hands-you-can-walk-the-Freedom-Trail" class="headerlink" title="T: If you have a lot of time on your hands, you can walk the Freedom Trail."></a>T: If you have a lot of time on your hands, you can walk the Freedom Trail.</h2><h2 id="J-I’m-kind-of-strapped-for-time"><a href="#J-I’m-kind-of-strapped-for-time" class="headerlink" title="J: I’m kind of strapped for time."></a>J: I’m kind of strapped for time.</h2><h2 id="T-In-that-case-whatever-else-you-do-you-must-check-out-the-observatory-on-the-63rd-floor-of-the-John-Hancock-Building"><a href="#T-In-that-case-whatever-else-you-do-you-must-check-out-the-observatory-on-the-63rd-floor-of-the-John-Hancock-Building" class="headerlink" title="T: In that case, whatever else you do, you must check out the observatory on the 63rd floor of the John Hancock Building."></a>T: In that case, whatever else you do, you must check out the observatory on the 63rd floor of the John Hancock Building.</h2><h2 id="J-Isn’t-the-building-all-glass"><a href="#J-Isn’t-the-building-all-glass" class="headerlink" title="J: Isn’t the building all glass?"></a>J: Isn’t the building all glass?</h2><h2 id="T-That’s-right-You-can’t-miss-it-Here’s-your-hotel-That’ll-be-17-50-please"><a href="#T-That’s-right-You-can’t-miss-it-Here’s-your-hotel-That’ll-be-17-50-please" class="headerlink" title="T: That’s right. You can’t miss it. Here’s your hotel. That’ll be $17.50, please."></a>T: That’s right. You can’t miss it. Here’s your hotel. That’ll be $17.50, please.</h2><h2 id="J-Here’s-20-00-Keep-the-change"><a href="#J-Here’s-20-00-Keep-the-change" class="headerlink" title="J: Here’s $20.00. Keep the change."></a>J: Here’s $20.00. Keep the change.</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Touring by Taxi</title>
      <link href="/2018/12/26/Lesson-61-md/"/>
      <url>/2018/12/26/Lesson-61-md/</url>
      
        <content type="html"><![CDATA[<h2 id="nbsp-nbsp-nbsp-nbsp-One-of-the-most-convenient-but-expensive-ways-to-get-around-a-city-in-any-country-is-by-taxi-And-in-some-cases-tipping-is-expected"><a href="#nbsp-nbsp-nbsp-nbsp-One-of-the-most-convenient-but-expensive-ways-to-get-around-a-city-in-any-country-is-by-taxi-And-in-some-cases-tipping-is-expected" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;One of the most convenient but expensive ways to get around a city in any country is by taxi. And in some cases, tipping is expected."></a>&nbsp;&nbsp;&nbsp;&nbsp;One of the most convenient but expensive ways to get around a city in any country is by taxi. And in some cases, tipping is expected.</h2><h2 id="nbsp-nbsp-nbsp-nbsp-A-taxi-driver-knows-the-city-like-the-back-of-his-hand-He-can-tell-you-whatever-you-want-to-know-At-the-same-time-he’ll-be-your-personal-tour-guide-He-can-take-you-wherever-you-want-to-go-So-however-expensive-the-taxi-ride-may-be-the-advice-you-get-from-the-driver-will-certainly-be-worth-it"><a href="#nbsp-nbsp-nbsp-nbsp-A-taxi-driver-knows-the-city-like-the-back-of-his-hand-He-can-tell-you-whatever-you-want-to-know-At-the-same-time-he’ll-be-your-personal-tour-guide-He-can-take-you-wherever-you-want-to-go-So-however-expensive-the-taxi-ride-may-be-the-advice-you-get-from-the-driver-will-certainly-be-worth-it" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;A taxi driver knows the city like the back of his hand. He can tell you whatever you want to know. At the same time he’ll be your personal tour guide. He can take you wherever you want to go. So, however expensive the taxi ride may be, the advice you get from the driver will certainly be worth it."></a>&nbsp;&nbsp;&nbsp;&nbsp;A taxi driver knows the city like the back of his hand. He can tell you whatever you want to know. At the same time he’ll be your personal tour guide. He can take you wherever you want to go. So, however expensive the taxi ride may be, the advice you get from the driver will certainly be worth it.</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Attract Boys</title>
      <link href="/2018/12/26/Lesson-60-md/"/>
      <url>/2018/12/26/Lesson-60-md/</url>
      
        <content type="html"><![CDATA[<h2 id="Jason-is-talking-to-Kate-a-classmate-he-likes-very-much-J-Jason-K-Kate"><a href="#Jason-is-talking-to-Kate-a-classmate-he-likes-very-much-J-Jason-K-Kate" class="headerlink" title="Jason is talking to Kate, a classmate he likes very much. (J = Jason, K = Kate)"></a>Jason is talking to Kate, a classmate he likes very much. (J = Jason, K = Kate)</h2><h2 id="J-I-don’t-understand-why-you-dye-your-hair-and-wear-all-kinds-of-weird-colthes-Kate"><a href="#J-I-don’t-understand-why-you-dye-your-hair-and-wear-all-kinds-of-weird-colthes-Kate" class="headerlink" title="J: I don’t understand why you dye your hair and wear all kinds of weird colthes, Kate."></a>J: I don’t understand why you dye your hair and wear all kinds of weird colthes, Kate.</h2><h2 id="K-I-guess-that’s-how-I-attract-boys"><a href="#K-I-guess-that’s-how-I-attract-boys" class="headerlink" title="K: I guess that’s how I attract boys."></a>K: I guess that’s how I attract boys.</h2><h2 id="J-Yes-but-the-wrong-kind-of-boys"><a href="#J-Yes-but-the-wrong-kind-of-boys" class="headerlink" title="J: Yes, but the wrong kind of boys."></a>J: Yes, but the wrong kind of boys.</h2><h2 id="K-What-do-you-mean"><a href="#K-What-do-you-mean" class="headerlink" title="K: What do you mean?"></a>K: What do you mean?</h2><h2 id="J-The-type-of-guys-who-go-out-with-you-wear-earrings-and-have-tattoos-on-their-arms"><a href="#J-The-type-of-guys-who-go-out-with-you-wear-earrings-and-have-tattoos-on-their-arms" class="headerlink" title="J: The type of guys who go out with you wear earrings and have tattoos on their arms."></a>J: The type of guys who go out with you wear earrings and have tattoos on their arms.</h2><h2 id="K-What-kind-of-boys-do-you-think-I-should-go-out-with-then"><a href="#K-What-kind-of-boys-do-you-think-I-should-go-out-with-then" class="headerlink" title="K: What kind of boys do you think I should go out with then?"></a>K: What kind of boys do you think I should go out with then?</h2><h2 id="J-Uh…somebody-like-me-for-instance"><a href="#J-Uh…somebody-like-me-for-instance" class="headerlink" title="J: Uh…somebody like me, for instance."></a>J: Uh…somebody like me, for instance.</h2><h2 id="K-Oh-is-that-so"><a href="#K-Oh-is-that-so" class="headerlink" title="K: Oh, is that so?"></a>K: Oh, is that so?</h2><h2 id="J-The-day-will-come-when-you-know-I’m-right"><a href="#J-The-day-will-come-when-you-know-I’m-right" class="headerlink" title="J:The day will come when you know I’m right."></a>J:The day will come when you know I’m right.</h2><h2 id="K-We’ll-see"><a href="#K-We’ll-see" class="headerlink" title="K: We’ll see."></a>K: We’ll see.</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About Moral Values</title>
      <link href="/2018/12/24/Lesson-59-md/"/>
      <url>/2018/12/24/Lesson-59-md/</url>
      
        <content type="html"><![CDATA[<h2 id="nbsp-nbsp-nbsp-nbsp-More-and-more-people-are-forgetting-the-saying-“Pride-comes-before-a-fall”-I-remember-only-a-few-years-ago-when-things-used-to-be-so-different-People-used-to-be-more-modest-and-humble"><a href="#nbsp-nbsp-nbsp-nbsp-More-and-more-people-are-forgetting-the-saying-“Pride-comes-before-a-fall”-I-remember-only-a-few-years-ago-when-things-used-to-be-so-different-People-used-to-be-more-modest-and-humble" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;More and more people are forgetting the saying, “Pride comes before a fall” I remember only a few years ago when things used to be so different. People used to be more modest and humble."></a>&nbsp;&nbsp;&nbsp;&nbsp;More and more people are forgetting the saying, “Pride comes before a fall” I remember only a few years ago when things used to be so different. People used to be more modest and humble.</h2><h2 id="nbsp-nbsp-nbsp-nbsp-As-I-looked-around-at-my-schoolmates-the-other-day-I-realized-how-diferent-things-are-People-are-so-much-more-pretenious-nowadays-With-their-fancy-colthes-and-stylish-hairdos-they-appear-too-materialistic-Which-is-not-to-my-liking-I-know-modernization-is-necessary-for-advancement-However-I-hope-we-don’t-lose-our-traditional-moral-values-along-the-way"><a href="#nbsp-nbsp-nbsp-nbsp-As-I-looked-around-at-my-schoolmates-the-other-day-I-realized-how-diferent-things-are-People-are-so-much-more-pretenious-nowadays-With-their-fancy-colthes-and-stylish-hairdos-they-appear-too-materialistic-Which-is-not-to-my-liking-I-know-modernization-is-necessary-for-advancement-However-I-hope-we-don’t-lose-our-traditional-moral-values-along-the-way" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;As I looked around at my schoolmates the other day. I realized how diferent things are. People are so much more pretenious nowadays. With their fancy colthes and stylish hairdos, they appear too materialistic, Which is not to my liking. I know modernization is necessary for advancement. However, I hope we don’t lose our traditional moral values along the way."></a>&nbsp;&nbsp;&nbsp;&nbsp;As I looked around at my schoolmates the other day. I realized how diferent things are. People are so much more pretenious nowadays. With their fancy colthes and stylish hairdos, they appear too materialistic, Which is not to my liking. I know modernization is necessary for advancement. However, I hope we don’t lose our traditional moral values along the way.</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3新特性</title>
      <link href="/2018/12/24/CSS3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2018/12/24/CSS3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>CSS3大名应该所有涉及到前端开发的宝宝们都有不同程度的了解；CSS3是CSS（层叠样式表）技术的升级版本，于1999年开始制订，2001年5月23日W3C完成了CSS3的工作草案，主要包括盒子模型、列表模块、超链接方式、语言模块、背景和边框、文字特效、多栏布局等模块。但是如果让其说出CSS3中有哪些新特性，可能很多人一下子不知从何说起，或者是不能很完美的说出它的特性，下面就让我替你们总结一下CSS3有哪些骚特性。</p><h2 id="边框（border）"><a href="#边框（border）" class="headerlink" title="边框（border）"></a>边框（border）</h2><p>通过CSS3可以在不使用设计软件的情况下能够创建圆角边框、向矩形添加阴影、使用图片来绘制边框。</p><h3 id="border-radius（圆角边框）"><a href="#border-radius（圆角边框）" class="headerlink" title="border-radius（圆角边框）"></a>border-radius（圆角边框）</h3><h3 id="box-shadow（阴影）"><a href="#box-shadow（阴影）" class="headerlink" title="box-shadow（阴影）"></a>box-shadow（阴影）</h3><h3 id="border-image（图片边框）"><a href="#border-image（图片边框）" class="headerlink" title="border-image（图片边框）"></a>border-image（图片边框）</h3><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><h3 id="疑点解答"><a href="#疑点解答" class="headerlink" title="疑点解答"></a>疑点解答</h3><h2 id="背景（background）"><a href="#背景（background）" class="headerlink" title="背景（background）"></a>背景（background）</h2><p>CSS3新增了多个新的背景属性，它们提供了对背景更强大的控制</p><h3 id="background-size（控制背景图片尺寸属性）"><a href="#background-size（控制背景图片尺寸属性）" class="headerlink" title="background-size（控制背景图片尺寸属性）"></a>background-size（控制背景图片尺寸属性）</h3><h3 id="background-origin（控制背景图片定位区域）"><a href="#background-origin（控制背景图片定位区域）" class="headerlink" title="background-origin（控制背景图片定位区域）"></a>background-origin（控制背景图片定位区域）</h3><h3 id="background-clip（控制背景的绘制区域）"><a href="#background-clip（控制背景的绘制区域）" class="headerlink" title="background-clip（控制背景的绘制区域）"></a>background-clip（控制背景的绘制区域）</h3><h3 id="兼容性-1"><a href="#兼容性-1" class="headerlink" title="兼容性"></a>兼容性</h3><h3 id="疑点解答-1"><a href="#疑点解答-1" class="headerlink" title="疑点解答"></a>疑点解答</h3><h2 id="文本效果（text-decoration）"><a href="#文本效果（text-decoration）" class="headerlink" title="文本效果（text decoration）"></a>文本效果（text decoration）</h2><p>CSS3新增多个文本特性，可以让我们设计出更好看的字体</p><h3 id="text-shadow（文本阴影）"><a href="#text-shadow（文本阴影）" class="headerlink" title="text-shadow（文本阴影）"></a>text-shadow（文本阴影）</h3><h3 id="text-wrap（文本换行规则）"><a href="#text-wrap（文本换行规则）" class="headerlink" title="text-wrap（文本换行规则）"></a>text-wrap（文本换行规则）</h3><h3 id="word-break（规定非中日韩文本的换行规则）"><a href="#word-break（规定非中日韩文本的换行规则）" class="headerlink" title="word-break（规定非中日韩文本的换行规则）"></a>word-break（规定非中日韩文本的换行规则）</h3><h3 id="text-overflow（规定当文本溢出包含元素时发生的事情）"><a href="#text-overflow（规定当文本溢出包含元素时发生的事情）" class="headerlink" title="text-overflow（规定当文本溢出包含元素时发生的事情）"></a>text-overflow（规定当文本溢出包含元素时发生的事情）</h3><h3 id="text-justify（规定当-text-align-设置为-“justify”-时所使用的对齐方法）"><a href="#text-justify（规定当-text-align-设置为-“justify”-时所使用的对齐方法）" class="headerlink" title="text-justify（规定当 text-align 设置为 “justify” 时所使用的对齐方法）"></a>text-justify（规定当 text-align 设置为 “justify” 时所使用的对齐方法）</h3><h3 id="text-emphasis（向元素的文本应用重点标记以及重点标记的前景色）"><a href="#text-emphasis（向元素的文本应用重点标记以及重点标记的前景色）" class="headerlink" title="text-emphasis（向元素的文本应用重点标记以及重点标记的前景色）"></a>text-emphasis（向元素的文本应用重点标记以及重点标记的前景色）</h3><h3 id="text-outline（规定文本的轮廓）"><a href="#text-outline（规定文本的轮廓）" class="headerlink" title="text-outline（规定文本的轮廓）"></a>text-outline（规定文本的轮廓）</h3><h3 id="punctuation-trim（规定是否对标点字符进行修剪）"><a href="#punctuation-trim（规定是否对标点字符进行修剪）" class="headerlink" title="punctuation-trim（规定是否对标点字符进行修剪）"></a>punctuation-trim（规定是否对标点字符进行修剪）</h3><h3 id="hanging-punctuation（规定标点字符是否位于线框之外）"><a href="#hanging-punctuation（规定标点字符是否位于线框之外）" class="headerlink" title="hanging-punctuation（规定标点字符是否位于线框之外）"></a>hanging-punctuation（规定标点字符是否位于线框之外）</h3><h2 id="引用外部字体（-font-face）"><a href="#引用外部字体（-font-face）" class="headerlink" title="引用外部字体（@font-face）"></a>引用外部字体（@font-face）</h2><h3 id="兼容性-2"><a href="#兼容性-2" class="headerlink" title="兼容性"></a>兼容性</h3><h3 id="疑点解答-2"><a href="#疑点解答-2" class="headerlink" title="疑点解答"></a>疑点解答</h3><h2 id="2D转换（2D-transform）"><a href="#2D转换（2D-transform）" class="headerlink" title="2D转换（2D transform）"></a>2D转换（2D transform）</h2><h3 id="translate-（元素平移）"><a href="#translate-（元素平移）" class="headerlink" title="translate()（元素平移）"></a>translate()（元素平移）</h3><h3 id="rotate-（元素旋转）"><a href="#rotate-（元素旋转）" class="headerlink" title="rotate()（元素旋转）"></a>rotate()（元素旋转）</h3><h3 id="scale-（元素缩放）"><a href="#scale-（元素缩放）" class="headerlink" title="scale() （元素缩放）"></a>scale() （元素缩放）</h3><h3 id="skew-（元素翻转）"><a href="#skew-（元素翻转）" class="headerlink" title="skew()（元素翻转）"></a>skew()（元素翻转）</h3><h3 id="matrix-（2D转换组合方法）"><a href="#matrix-（2D转换组合方法）" class="headerlink" title="matrix()（2D转换组合方法）"></a>matrix()（2D转换组合方法）</h3><h2 id="3D转换（3D-transform）"><a href="#3D转换（3D-transform）" class="headerlink" title="3D转换（3D transform）"></a>3D转换（3D transform）</h2><h3 id="translate3d-x-y-z-（定义-3D-转化）"><a href="#translate3d-x-y-z-（定义-3D-转化）" class="headerlink" title="translate3d(x,y,z)（定义 3D 转化）"></a>translate3d(x,y,z)（定义 3D 转化）</h3><h4 id="translateX-x-（定义-3D-转化，仅使用用于-X-轴的值）"><a href="#translateX-x-（定义-3D-转化，仅使用用于-X-轴的值）" class="headerlink" title="translateX(x)（定义 3D 转化，仅使用用于 X 轴的值）"></a>translateX(x)（定义 3D 转化，仅使用用于 X 轴的值）</h4><h4 id="translateY-y-（定义-3D-转化，仅使用用于-Y-轴的值）"><a href="#translateY-y-（定义-3D-转化，仅使用用于-Y-轴的值）" class="headerlink" title="translateY(y)（定义 3D 转化，仅使用用于 Y 轴的值）"></a>translateY(y)（定义 3D 转化，仅使用用于 Y 轴的值）</h4><h4 id="translateZ-z-（定义-3D-转化，仅使用用于-Z-轴的值）"><a href="#translateZ-z-（定义-3D-转化，仅使用用于-Z-轴的值）" class="headerlink" title="translateZ(z)（定义 3D 转化，仅使用用于 Z 轴的值）"></a>translateZ(z)（定义 3D 转化，仅使用用于 Z 轴的值）</h4><h3 id="scale3d-x-y-z-（定义-3D-缩放）"><a href="#scale3d-x-y-z-（定义-3D-缩放）" class="headerlink" title="scale3d(x,y,z)（定义 3D 缩放）"></a>scale3d(x,y,z)（定义 3D 缩放）</h3><h4 id="scaleX-x-（定义-3D-缩放，仅使用用于-X-轴的值）"><a href="#scaleX-x-（定义-3D-缩放，仅使用用于-X-轴的值）" class="headerlink" title="scaleX(x)（定义 3D 缩放，仅使用用于 X 轴的值）"></a>scaleX(x)（定义 3D 缩放，仅使用用于 X 轴的值）</h4><h4 id="scaleY-y-（定义-3D-缩放，仅使用用于-Y-轴的值）"><a href="#scaleY-y-（定义-3D-缩放，仅使用用于-Y-轴的值）" class="headerlink" title="scaleY(y)（定义 3D 缩放，仅使用用于 Y 轴的值）"></a>scaleY(y)（定义 3D 缩放，仅使用用于 Y 轴的值）</h4><h4 id="scaleZ-z-（定义-3D-缩放，仅使用用于-Z-轴的值）"><a href="#scaleZ-z-（定义-3D-缩放，仅使用用于-Z-轴的值）" class="headerlink" title="scaleZ(z)（定义 3D 缩放，仅使用用于 Z 轴的值）"></a>scaleZ(z)（定义 3D 缩放，仅使用用于 Z 轴的值）</h4><h3 id="rotate3d-x-y-z-（定义-3D-旋转）"><a href="#rotate3d-x-y-z-（定义-3D-旋转）" class="headerlink" title="rotate3d(x,y,z)（定义 3D 旋转）"></a>rotate3d(x,y,z)（定义 3D 旋转）</h3><h4 id="rotateX-x-（定义-3D-旋转，仅使用用于-X-轴的值）"><a href="#rotateX-x-（定义-3D-旋转，仅使用用于-X-轴的值）" class="headerlink" title="rotateX(x)（定义 3D 旋转，仅使用用于 X 轴的值）"></a>rotateX(x)（定义 3D 旋转，仅使用用于 X 轴的值）</h4><h4 id="rotateY-y-（定义-3D-旋转，仅使用用于-Y-轴的值）"><a href="#rotateY-y-（定义-3D-旋转，仅使用用于-Y-轴的值）" class="headerlink" title="rotateY(y)（定义 3D 旋转，仅使用用于 Y 轴的值）"></a>rotateY(y)（定义 3D 旋转，仅使用用于 Y 轴的值）</h4><h4 id="rotateZ-z-（定义-3D-旋转，仅使用用于-Z-轴的值）"><a href="#rotateZ-z-（定义-3D-旋转，仅使用用于-Z-轴的值）" class="headerlink" title="rotateZ(z)（定义 3D 旋转，仅使用用于 Z 轴的值）"></a>rotateZ(z)（定义 3D 旋转，仅使用用于 Z 轴的值）</h4><h3 id="matrix3d-n-n-n-n-n-n-n-n-n-n-n-n-n-n-n-n-（定义-3D-转换，使用-16-个值的-4x4-矩阵）"><a href="#matrix3d-n-n-n-n-n-n-n-n-n-n-n-n-n-n-n-n-（定义-3D-转换，使用-16-个值的-4x4-矩阵）" class="headerlink" title="matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n) （定义 3D 转换，使用 16 个值的 4x4 矩阵）"></a>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n) （定义 3D 转换，使用 16 个值的 4x4 矩阵）</h3><h3 id="perspective-n-（定义-3D-转换元素的透视视图）"><a href="#perspective-n-（定义-3D-转换元素的透视视图）" class="headerlink" title="perspective(n)（定义 3D 转换元素的透视视图）"></a>perspective(n)（定义 3D 转换元素的透视视图）</h3><h2 id="过渡（transition）"><a href="#过渡（transition）" class="headerlink" title="过渡（transition）"></a>过渡（transition）</h2><p>通过 CSS3，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果</p><h2 id="动画（animation-amp-keyframes）"><a href="#动画（animation-amp-keyframes）" class="headerlink" title="动画（animation &amp; @keyframes）"></a>动画（animation &amp; @keyframes）</h2><h2 id="多列（multi-column）"><a href="#多列（multi-column）" class="headerlink" title="多列（multi-column）"></a>多列（multi-column）</h2><h3 id="column-count（规定元素应该被分隔的列数）"><a href="#column-count（规定元素应该被分隔的列数）" class="headerlink" title="column-count（规定元素应该被分隔的列数）"></a>column-count（规定元素应该被分隔的列数）</h3><h3 id="column-gap（规定列之间的间隔）"><a href="#column-gap（规定列之间的间隔）" class="headerlink" title="column-gap（规定列之间的间隔）"></a>column-gap（规定列之间的间隔）</h3><h3 id="column-rule（设置所有-column-rule-属性的简写属性）"><a href="#column-rule（设置所有-column-rule-属性的简写属性）" class="headerlink" title="column-rule（设置所有 column-rule-* 属性的简写属性）"></a>column-rule（设置所有 column-rule-* 属性的简写属性）</h3><h3 id="column-fill（规定如何填充列）"><a href="#column-fill（规定如何填充列）" class="headerlink" title="column-fill（规定如何填充列）"></a>column-fill（规定如何填充列）</h3><h3 id="column-rule-color（规定列之间规则的颜色）"><a href="#column-rule-color（规定列之间规则的颜色）" class="headerlink" title="column-rule-color（规定列之间规则的颜色）"></a>column-rule-color（规定列之间规则的颜色）</h3><h3 id="column-rule-style（规定列之间规则的样式）"><a href="#column-rule-style（规定列之间规则的样式）" class="headerlink" title="column-rule-style（规定列之间规则的样式）"></a>column-rule-style（规定列之间规则的样式）</h3><h3 id="column-rule-width（规定列之间规则的宽度）"><a href="#column-rule-width（规定列之间规则的宽度）" class="headerlink" title="column-rule-width（规定列之间规则的宽度）"></a>column-rule-width（规定列之间规则的宽度）</h3><h3 id="column-span（规定元素应该横跨的列数）"><a href="#column-span（规定元素应该横跨的列数）" class="headerlink" title="column-span（规定元素应该横跨的列数）"></a>column-span（规定元素应该横跨的列数）</h3><h3 id="column-width（规定列的宽度）"><a href="#column-width（规定列的宽度）" class="headerlink" title="column-width（规定列的宽度）"></a>column-width（规定列的宽度）</h3><h3 id="columns（规定设置-column-width-和-column-count-的简写属性）"><a href="#columns（规定设置-column-width-和-column-count-的简写属性）" class="headerlink" title="columns（规定设置 column-width 和 column-count 的简写属性）"></a>columns（规定设置 column-width 和 column-count 的简写属性）</h3><h2 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h2><h3 id="resize（规定是否可由用户对元素的尺寸进行调整）"><a href="#resize（规定是否可由用户对元素的尺寸进行调整）" class="headerlink" title="resize（规定是否可由用户对元素的尺寸进行调整）"></a>resize（规定是否可由用户对元素的尺寸进行调整）</h3><h3 id="box-sizing（允许您以确切的方式定义适应某个区域的具体内容）"><a href="#box-sizing（允许您以确切的方式定义适应某个区域的具体内容）" class="headerlink" title="box-sizing（允许您以确切的方式定义适应某个区域的具体内容）"></a>box-sizing（允许您以确切的方式定义适应某个区域的具体内容）</h3><h3 id="icon（为创作者提供使用图标化等价物来设置元素样式的能力）"><a href="#icon（为创作者提供使用图标化等价物来设置元素样式的能力）" class="headerlink" title="icon（为创作者提供使用图标化等价物来设置元素样式的能力）"></a>icon（为创作者提供使用图标化等价物来设置元素样式的能力）</h3><h3 id="outline-offset（对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓）"><a href="#outline-offset（对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓）" class="headerlink" title="outline-offset（对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓）"></a>outline-offset（对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓）</h3><h3 id="appearance（允许您将元素设置为标准用户界面元素的外观）"><a href="#appearance（允许您将元素设置为标准用户界面元素的外观）" class="headerlink" title="appearance（允许您将元素设置为标准用户界面元素的外观）"></a>appearance（允许您将元素设置为标准用户界面元素的外观）</h3><h3 id="nav-down（规定在使用-arrow-down-导航键时向何处导航）"><a href="#nav-down（规定在使用-arrow-down-导航键时向何处导航）" class="headerlink" title="nav-down（规定在使用 arrow-down 导航键时向何处导航）"></a>nav-down（规定在使用 arrow-down 导航键时向何处导航）</h3><h3 id="nav-index（设置元素的-tab-键控制次序）"><a href="#nav-index（设置元素的-tab-键控制次序）" class="headerlink" title="nav-index（设置元素的 tab 键控制次序）"></a>nav-index（设置元素的 tab 键控制次序）</h3><h3 id="nav-left（规定在使用-arrow-left-导航键时向何处导航）"><a href="#nav-left（规定在使用-arrow-left-导航键时向何处导航）" class="headerlink" title="nav-left（规定在使用 arrow-left 导航键时向何处导航）"></a>nav-left（规定在使用 arrow-left 导航键时向何处导航）</h3><h3 id="nav-right（规定在使用-arrow-right-导航键时向何处导航）"><a href="#nav-right（规定在使用-arrow-right-导航键时向何处导航）" class="headerlink" title="nav-right（规定在使用 arrow-right 导航键时向何处导航）"></a>nav-right（规定在使用 arrow-right 导航键时向何处导航）</h3><h3 id="nav-up（规定在使用-arrow-up-导航键时向何处导航）"><a href="#nav-up（规定在使用-arrow-up-导航键时向何处导航）" class="headerlink" title="nav-up（规定在使用 arrow-up 导航键时向何处导航）"></a>nav-up（规定在使用 arrow-up 导航键时向何处导航）</h3><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>&gt;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS专题二</title>
      <link href="/2018/12/23/HTTPS%E4%B8%93%E9%A2%98%E4%BA%8C/"/>
      <url>/2018/12/23/HTTPS%E4%B8%93%E9%A2%98%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS专题一</title>
      <link href="/2018/12/23/HTTPS%E4%B8%93%E9%A2%98%E4%B8%80/"/>
      <url>/2018/12/23/HTTPS%E4%B8%93%E9%A2%98%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p><a href="https://www.cnblogs.com/zxj015/p/6530766.html" target="_blank" rel="noopener">Https协议详解</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>有赞二面</title>
      <link href="/2018/12/20/%E6%9C%89%E8%B5%9E%E4%BA%8C%E9%9D%A2/"/>
      <url>/2018/12/20/%E6%9C%89%E8%B5%9E%E4%BA%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<ol><li>搭建静态资源服务器有哪些好处</li><li>如何实现垂直居中</li><li>如何实现js动态加载</li><li>对于http缓存了解</li><li>如何理解闭包，以及闭包有哪些应用场景</li><li>Symbol的用法</li><li>如何实现继承</li><li>http请求头有哪些</li><li>如何实现跨域</li><li>nginx反向代理如何实现</li><li>如果一个表格的列宽非常大，你如何做优化</li><li>对于websocket你踩过哪些坑</li><li>现在出来一个http2,你知道吗？<blockquote><p><a href="https://zhuanlan.zhihu.com/p/27395037" target="_blank" rel="noopener">HTTPS系列干货（一）：HTTPS 原理详解</a></p></blockquote></li><li>https你知道吗</li><li>讲解一下如何给你的前端项目进行优化</li><li>如下图，其中A、B、C容器随着容器自由伸缩，且等宽，上下居中，其中左右留白固定为10px，如何实现？<div style="width:70%;margin:0 auto;"><img src="/2018/12/20/有赞二面/layout.png"></div></li><li>这一题是编程题，题目如下,实现a函数中的类容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function a(data,path,default)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">let a = &#123;a:[b:&#123;c:2&#125;]&#125;;</span><br><span class="line">a(a,[a,0,b,c]); //输出2</span><br><span class="line">a(a,&apos;a[0].b.c&apos;) //输出2</span><br><span class="line">a(a,&apos;a.b.c&apos;,&apos;default&apos;) //输出default</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 性能 </tag>
            
            <tag> http </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊http的keepalive</title>
      <link href="/2018/12/18/%E8%81%8A%E8%81%8Ahttp%E7%9A%84keepalive/"/>
      <url>/2018/12/18/%E8%81%8A%E8%81%8Ahttp%E7%9A%84keepalive/</url>
      
        <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>之前面试，有面试官问我http中的connection字段中有个keep-alive值，听说它可以保持http的长时间链接；那么问题来了，WebSocket也是保持长连接的，那么它们之间有什么区别？http的keep-alive可以代替webSocket的吗？经过查阅书籍和网上很多资料，终于有了答案。</p><h3 id="http连接类型"><a href="#http连接类型" class="headerlink" title="http连接类型"></a>http连接类型</h3><p>说到keep-alive之前，首先说一说http的连接类型</p><ul><li>短链接<br>所谓短连接，就是每次请求一个资源就建立连接，请求完成后连接立马关闭。每次请求都经过“创建tcp连接-&gt;请求资源-&gt;响应资源-&gt;释放连接”这样的过程。</li><li>长连接<br>所谓长连接(persistent connection)，就是只建立一次连接，多次资源请求都复用该连接，完成后关闭。要请求一个页面上的十张图，只需要建立一次tcp连接，然后依次请求十张图，等待资源响应，释放连接。</li><li>并行连接<br>所谓并行连接(multiple connections)，其实就是并发的短连接。</li></ul><img src="/2018/12/18/聊聊http的keepalive/keepalive.png"><h2 id="http的keep-alive"><a href="#http的keep-alive" class="headerlink" title="http的keep-alive"></a>http的keep-alive</h2><p>说到keep-alive，其实有两个，一个是TCP的keepalive，另一个是http层面的keep-alive，两者由于发音相同可能容易让人混淆。其中http的keep-alive我们是接触比较多的。<br>在HTTP/1.0里，为了实现client到web-server能支持长连接，必须在HTTP请求头里显示指定Connection:keep-alive<br>在HTTP/1.1里，就默认是开启了keep-alive，要关闭keep-alive需要在HTTP请求头里显示指定Connection:close<br>现在大多数浏览器都默认是使用HTTP/1.1，所以keep-alive都是默认打开的。一旦client和server达成协议，那么长连接就建立好了。</p><h3 id="keep-alive达成协议过程"><a href="#keep-alive达成协议过程" class="headerlink" title="keep-alive达成协议过程"></a>keep-alive达成协议过程</h3><ul><li>client发出的HTTP请求头需要增加Connection:keep-alive字段</li><li>Web-Server端要能识别Connection:keep-alive字段，并且在http的response里指定Connection:keep-alive字段，告诉client，我能提供keep-alive服务，并且”应允”client我暂时不会关闭socket连接。</li></ul><h2 id="keep-alive和WebSocket的区别"><a href="#keep-alive和WebSocket的区别" class="headerlink" title="keep-alive和WebSocket的区别"></a>keep-alive和WebSocket的区别</h2><ol><li>keep-alive在一次 TCP连接中完成多个HTTP请求过程中每个请求仍然要单独要给服务器发header；WebSocket通过第一个HTTPrequest建立了TCP连接之后之后的交换数据都不需要再发HTTP request了。</li><li>keep-alive只是一种为了达到复用tcp连接的“协商”行为，双方并没有建立正真的连接会话，服务端也可以不认可，也可以随时（在任何一次请求完成后）关闭掉。WebSocket 不同，它本身就规定了是正真的、双工的长连接，两边都必须要维持住连接的状态。</li><li>http协议决定了keep-alive连接中浏览器端总是主动发起方，http的服务端总是被动的接受、响应请求，从不主动。WebSocket协议，在连接之后客户端服务端是完全平等的不存在主动被动之说。</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><p><a href="https://blog.csdn.net/xjbclz/article/details/53046627" target="_blank" rel="noopener">keep-alive和websocket有什么区别</a><br><a href="https://www.cnblogs.com/jtlgb/p/8805319.html" target="_blank" rel="noopener">理解HTTP之keep-alive</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>有赞科技面试</title>
      <link href="/2018/12/17/%E6%9C%89%E8%B5%9E%E7%A7%91%E6%8A%80%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/12/17/%E6%9C%89%E8%B5%9E%E7%A7%91%E6%8A%80%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ol><li>如何实现垂直居中</li><li>如何实现javascript动态加载</li><li>http缓存如何了解</li><li>如何理解闭包</li><li>如何实现类的继承</li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>彻底搞懂JS正则表达式</title>
      <link href="/2018/12/15/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/12/15/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>&gt;<strong>参考：</strong> <a href="https://mp.weixin.qq.com/s/4FXb3byOmilZl6pyijhtjA" target="_blank" rel="noopener">教科书式的正则匹配</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大坝科技</title>
      <link href="/2018/12/13/%E5%A4%A7%E5%9D%9D%E7%A7%91%E6%8A%80/"/>
      <url>/2018/12/13/%E5%A4%A7%E5%9D%9D%E7%A7%91%E6%8A%80/</url>
      
        <content type="html"><![CDATA[<ol><li>WebSocket兼容性问题</li><li>Flex布局<blockquote><p><strong>参考：</strong><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></p></blockquote></li><li>讲一下闭包吧</li><li>如何实现浅拷贝的几种方式，我说使用Object.assign ,面试官说可以使用 …</li><li><p>Vue computed和watch的区别<br><strong>computed：</strong> 监控计算属性的变化（被动变化），主要是根据计算属性中所依赖值发生变化，从而得到新的值，计算属性可以不再data属性中申明，如果计算属性依赖的属性发生了变化，就会运行该computed函数得到计算属性新值，反之如果需要用到计算属性，就会从缓存里面去取。</p><img src="/2018/12/13/大坝科技/1.png"><p>代码示例：</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;app&quot;&gt;&#123; &#123; fullName &#125; &#125;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;  </span><br><span class="line">        el: &apos;#app&apos;,  </span><br><span class="line">        data: &#123;  </span><br><span class="line">            firstName: &apos;Foo&apos;,  </span><br><span class="line">            lastName: &apos;Bar&apos;,  </span><br><span class="line">        &#125;,  </span><br><span class="line">        computed: &#123;  </span><br><span class="line">            fullName: function () &#123;  </span><br><span class="line">                return this.firstName + &apos; &apos; + this.lastName  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><p>代码中fullName就是计算属性，它所依赖的属性为firstName和lastName，如果它们发生任何变化，都会调用该计算属性函数，如果依赖没有变化，则不会调用，当需要fullName时候，会从缓存里面取。<br>计算属性默认是只有ES6的getter，当然可以在需要的时候自己设定ES6的setter:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//...</span><br><span class="line">computed: &#123;</span><br><span class="line">    fullName: &#123;</span><br><span class="line">        // getter</span><br><span class="line">        get: function () &#123;</span><br><span class="line">            return this.firstName + &apos; &apos; + this.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        // setter</span><br><span class="line">        set: function (newValue) &#123;</span><br><span class="line">            var names = newValue.split(&apos; &apos;)</span><br><span class="line">            this.firstName = names[0]</span><br><span class="line">            this.lastName = names[names.length - 1]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>那么问题来了，既然computed有setter方法，不知道大家是不是和我想法一样，这样setter不就可以取代了watch了吗？关于这个疑问，我觉得有几点可以说明：</p><ol><li>watch函数可以传来两个参数，一个是新值一个是旧值，而计算属性函数只有一个新值的参数，虽然可以使用其它办法来获取旧值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line"> return &#123;</span><br><span class="line">     frontPoints: 0    </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> watch: &#123;</span><br><span class="line">     frontPoints(newValue, oldValue) &#123;</span><br><span class="line">         console.log(newValue)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure></li><li>watch可以监控对象属性的变化,而setter不能是对象属性，个人觉得这一点是关键。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">　　return &#123;</span><br><span class="line">　　　　bet: &#123;</span><br><span class="line">　　　　　　pokerState: 53,</span><br><span class="line">　　　　　　pokerHistory: &apos;local&apos;</span><br><span class="line">　　　　&#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">　　bet: &#123;</span><br><span class="line">　　　　handler(newValue, oldValue) &#123;</span><br><span class="line">　　　　　　console.log(newValue)</span><br><span class="line">　　　　&#125;,</span><br><span class="line">　　　　deep: true</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure><strong>watch：</strong> 监控data中属性的变化（主动变化），如果该属性值变化，则会调用该watch函数，主要用来修改其它属性变量或处理一些复杂逻辑和异步操作；该变量必须是data中有的属性。</li></ol><img src="/2018/12/13/大坝科技/2.png"><p>代码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            firstName: &apos;Foo&apos;,</span><br><span class="line">            lastName: &apos;Bar&apos;,</span><br><span class="line">            fullName: &apos;Foo Bar&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            firstName: function (val) &#123;</span><br><span class="line">                this.fullName = val + &apos; &apos; + this.lastName</span><br><span class="line">            &#125;,</span><br><span class="line">            lastName: function (val) &#123;</span><br><span class="line">                this.fullName = this.firstName + &apos; &apos; + val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>当watch中的firstName和lastName值发生变化时，就会调用各自的函数。</p><blockquote><p><strong>参考：</strong><a href="https://blog.csdn.net/webxiaoma/article/details/72626439" target="_blank" rel="noopener">vue2 中 computed 和 watch 的异同？</a><br><a href="https://www.cnblogs.com/widgetbox/p/8954162.html" target="_blank" rel="noopener">vue中methods、watch、computed之间的差别对比以及适用场景</a><br><a href="https://blog.csdn.net/zhumengzj/article/details/78742069" target="_blank" rel="noopener">vuejs - 如何对某个对象的属性进行watch监听？</a><br><a href="https://blog.csdn.net/u014298440/article/details/82942680" target="_blank" rel="noopener">Vue使用watch监听一个对象中的属性</a></p></blockquote></li><li>为什么js设计者要创建原型链，有什么好处<br>prototype是一个指针，指向一个对象，这个对象是包含可以有特定类型的<strong>所有实例共享的属性和方法</strong><blockquote><p><strong>参考：</strong><a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html" target="_blank" rel="noopener">Javascript继承机制的设计思想</a><br><a href="https://www.jianshu.com/p/78e76e94ddb9" target="_blank" rel="noopener">JS里一切都是对象吗?!</a><br><a href="https://www.cnblogs.com/zhweb/p/5644799.html" target="_blank" rel="noopener">JS中new的原理</a><br><a href="https://www.jianshu.com/p/a2754b7293e4" target="_blank" rel="noopener">浅谈 JavaScript new 执行过程及function原理</a></p></blockquote></li><li>ES6的async和Promise的关系</li><li>列出Object的方法 </li><li>作为一个前端开发者你是如何协助UI设计师来设计出漂亮和性能好的页面</li><li>读过vue的源码吗</li><li>Angular4和Vue的异同点</li><li>给你一张页面你是如何布局的</li><li>react学过没有</li><li>为什么jquery已经逐渐被淘汰了<blockquote><p><strong>参考文献</strong> <a href="https://baijiahao.baidu.com/s?id=1595371190798465159&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">jQuery真的过时了！</a></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大话VUE2.X源码</title>
      <link href="/2018/12/13/%E5%A4%A7%E8%AF%9DVUE2-X%E6%BA%90%E7%A0%81/"/>
      <url>/2018/12/13/%E5%A4%A7%E8%AF%9DVUE2-X%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.cnblogs.com/sorrowx/p/7932242.html" target="_blank" rel="noopener">Vue2.x源码学习笔记-源码目录结构整理</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>趣链科技现场面试</title>
      <link href="/2018/12/13/%E8%B6%A3%E9%93%BE%E7%A7%91%E6%8A%80%E7%8E%B0%E5%9C%BA%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/12/13/%E8%B6%A3%E9%93%BE%E7%A7%91%E6%8A%80%E7%8E%B0%E5%9C%BA%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ol><li>WebWorker使用方法</li><li>你使用什么方法使得两个非同源的页面进行通信？PostMessage了解吗？<blockquote><p><strong>参考：</strong><a href="https://www.cnblogs.com/dolphinX/p/3464056.html" target="_blank" rel="noopener">html5 postMessage解决跨域、跨窗口消息传递</a><br><a href="https://www.cnblogs.com/kyrios/archive/2013/04/16/multipage-communication-channel.html" target="_blank" rel="noopener">利用HTML5 LocalStorage实现跨页面通信channel</a></p></blockquote></li><li>CSS3新特性<blockquote><p><a href="https://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/index.html" target="_blank" rel="noopener">深入了解 CSS3 新特性</a><br><a href="https://blog.csdn.net/chandoudeyuyi/article/details/69206236" target="_blank" rel="noopener">HTML5和CSS3新特性一览</a></p></blockquote></li><li>详细讲解一下http长轮询和短轮询</li><li>http keepAlive使用方法<blockquote><p><strong>参考：</strong> <a href="https://blog.csdn.net/xjbclz/article/details/53046627" target="_blank" rel="noopener">keep-alive和websocket有什么区别</a><br><a href="https://www.byvoid.com/zhs/blog/http-keep-alive-header" target="_blank" rel="noopener">HTTP协议头部与Keep-Alive模式详解</a></p></blockquote></li><li>项目中遇到的难题，如何解决的</li><li>你做的最得意的一件事情</li><li>github网站有吗，github page可以看一下吗</li><li>vue和Angular区别，为什么选用Angular<blockquote><p><strong>参考：</strong><a href="https://www.jianshu.com/p/d394ea98b483" target="_blank" rel="noopener">Angular4.x 介绍以及和 vue、react 对比、开发工具</a></p></blockquote></li><li>Vue和Angular双向绑定原理分别是什么</li><li>Vue双向绑定获取依赖，为什么在get的时候获取依赖<blockquote><p><strong>参考：</strong><a href="https://www.cnblogs.com/heshan1992/p/6877551.html" target="_blank" rel="noopener">Vue实现双向绑定的原理以及响应式数据</a></p></blockquote></li><li>对于WebSocket心跳包时间的优化</li><li>WebSocket的通信原理是什么，他是如何实现双向通信的</li><li>Webpack的loader的加载过程可以详细说一下吗</li><li>解释一下什么叫做BFC</li><li>如何实现三列布局</li><li>你看了些什么关于前端的书</li><li>谈一谈你了解的一些前端的设计模式</li><li>谈一谈你对盒子模型的理解以及对box-sizing的使用</li><li>如何防止SQL的注入漏洞</li><li>D3.js绘图的大体过程，为什么选用D3.js</li><li>你熟悉Flex布局吗</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BFC到底是什么</title>
      <link href="/2018/12/12/BFC%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2018/12/12/BFC%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考文件：<a href="https://blog.csdn.net/wky_csdn/article/details/73554720" target="_blank" rel="noopener">BFC原理及其应用</a><br><a href="https://segmentfault.com/q/1010000008875016" target="_blank" rel="noopener">关于BFC的特征，为什么说内部的box会在垂直方向一个接一个放置？</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何个性化自己的next主题</title>
      <link href="/2018/12/11/%E5%A6%82%E4%BD%95%E4%B8%AA%E6%80%A7%E5%8C%96%E8%87%AA%E5%B7%B1%E7%9A%84next%E4%B8%BB%E9%A2%98/"/>
      <url>/2018/12/11/%E5%A6%82%E4%BD%95%E4%B8%AA%E6%80%A7%E5%8C%96%E8%87%AA%E5%B7%B1%E7%9A%84next%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><div class="note default"><p><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">使用Hexo+Github一步步搭建属于自己的博客（基础）</a><br><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a><br><a href="https://www.jianshu.com/p/2f39de746900" target="_blank" rel="noopener">word在线预览功能</a><br><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt博客加密插件</a><br><a href="https://www.jianshu.com/p/1ff2fcbdd155" target="_blank" rel="noopener">Hexo博客第三方主题next进阶教程</a><br><a href="http://blog.heyuhua.xyz/2018/09/08/hexo+next%E8%AE%BE%E7%BD%AE%E7%9B%B8%E5%85%B3/" target="_blank" rel="noopener">hexo+next设置相关</a><br><a href="https://blog.csdn.net/blue_zy/article/details/79071414" target="_blank" rel="noopener">为你的Hexo加上评论系统-Valine</a></p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用Http请求头Range实现多线程下载</title>
      <link href="/2018/12/11/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Http%E8%AF%B7%E6%B1%82%E5%A4%B4Range%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD/"/>
      <url>/2018/12/11/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Http%E8%AF%B7%E6%B1%82%E5%A4%B4Range%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考：<a href="https://www.cnblogs.com/1995hxt/p/5692050.html" target="_blank" rel="noopener">Http请求头Range</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何使用NgZone优化你的项目</title>
      <link href="/2018/12/11/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8NgZone%E4%BC%98%E5%8C%96%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/12/11/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8NgZone%E4%BC%98%E5%8C%96%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><div class="note default"><p><a href="https://www.jianshu.com/p/c939d6251c3a" target="_blank" rel="noopener">Angular 6 动态加载组件显示 NgZone runOutsideAngular</a><br>  <a href="https://www.cnblogs.com/whitewolf/p/zone-js.html" target="_blank" rel="noopener">zone.js - 暴力之美</a><br>  <a href="https://www.zcfy.cc/article/how-the-hell-does-zone-js-really-work-995.html" target="_blank" rel="noopener">Zone.js到底是如何工作的？</a></p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么使用requestAnimationFrame</title>
      <link href="/2018/12/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8requestAnimationFrame/"/>
      <url>/2018/12/10/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8requestAnimationFrame/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考：<a href="https://blog.csdn.net/vhwfr2u02q/article/details/79492303" target="_blank" rel="noopener">深入理解 requestAnimationFrame</a><br><a href="https://segmentfault.com/a/1190000010229232" target="_blank" rel="noopener">requestAnimationFrame 方法你真的用对了吗？</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>细说前端兼容性</title>
      <link href="/2018/12/04/%E7%BB%86%E8%AF%B4%E5%89%8D%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
      <url>/2018/12/04/%E7%BB%86%E8%AF%B4%E5%89%8D%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>未来酒店电话面试</title>
      <link href="/2018/12/03/%E6%9C%AA%E6%9D%A5%E9%85%92%E5%BA%97%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/12/03/%E6%9C%AA%E6%9D%A5%E9%85%92%E5%BA%97%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="enter password to read." />    <label for="pass">enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>探讨前端安全性</title>
      <link href="/2018/12/01/%E6%8E%A2%E8%AE%A8%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%80%A7/"/>
      <url>/2018/12/01/%E6%8E%A2%E8%AE%A8%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%80%A7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端安全问题总结篇</title>
      <link href="/2018/11/30/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E7%AF%87/"/>
      <url>/2018/11/30/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%E7%AF%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>启维文化集团面试</title>
      <link href="/2018/11/29/%E5%90%AF%E7%BB%B4%E6%96%87%E5%8C%96%E9%9B%86%E5%9B%A2%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/11/29/%E5%90%AF%E7%BB%B4%E6%96%87%E5%8C%96%E9%9B%86%E5%9B%A2%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>这是一个现场面试，总共两个面试官，首先就是老生常谈的自我介绍，之后主要是根据我简历上写的知识进行询问。</p><ol><li><p>谈一谈浏览器兼容性问题<br>如果面试官问到你们的项目是怎么保证浏览器兼容性的，你应该从我们的项目要求兼容IE8.0以上，Chrome48以上，FireFox44以上，Opera，Safari等，从浏览器兼容的基本要求出发，那么我们在开发中就要考虑到HTMl、CSS和Javascript兼容性问题了。</p><ol><li>HTML部分<ol><li>针对html5标签在IE9下不识别<ol><li>通过js创建自定义的标签，在利用CSS特性来赋予她功能</li><li>通过引入HTML5的shiv,引入方式如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;   src=&quot;js/html5shiv.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>CSS部分</p><ol><li><p>CSS hack: 我们为了让页面形成统一的效果，要针对不同的浏览器或不同版本写出对应可解析的CSS样式，所以我们就把这个针对不同浏览器/版本而写CSS的过程叫做 CSS hack。CSS hack主要有三种，如下：</p><ol><li><p>IE条件注释：即在正常代码之外添加判别IE浏览器或对应版本的条件注释，符合条件的浏览器或者版本号才回执行里边的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  lt(less than)是小于 </span><br><span class="line">gt(greater than)是大于 </span><br><span class="line">lte(less than and equal)是小于等于</span><br><span class="line">gte(greater than and equal)是不小于</span><br><span class="line">!是不等于 --&gt;</span><br><span class="line">&lt;!-- [if IE]&gt;</span><br><span class="line">   你想要执行的代码 </span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line">&lt;!-- [if lt IE 8]&gt;</span><br><span class="line">   你想要执行的代码 </span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line">&lt;!-- [if ! IE 8]&gt;</span><br><span class="line">   你想要执行的代码 </span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line">         </span><br></pre></td></tr></table></figure></li><li><p>CSS属性前缀法: 即是给css的属性添加前缀。比如:</p><ul><li>＊可以被IE6/IE7识别</li><li>_ 只能被IE6识别</li><li>IE6-IE10都可以识别 “\9”</li><li>IE6不能识别!important</li><li>FireFox不能识别 * _  \9<br>下面通过一个案例来讲解使用方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">可以先使用“\9&quot;标记，将IE分离出来，</span><br><span class="line">再用”*&quot;分离出IE6/IE7，</span><br><span class="line">最后可以用“_”分离出IE6</span><br><span class="line">.type&#123;</span><br><span class="line">      color: #111; /* all */</span><br><span class="line"></span><br><span class="line">      color: #222\9; /* IE */</span><br><span class="line">      *color: #333; /* IE6/IE7 */</span><br><span class="line">      _color: #444; /* IE6 */</span><br><span class="line">      &#125;</span><br><span class="line">所以可以按着优先级就能给特定的版本捎上特定颜色</span><br></pre></td></tr></table></figure></li></ul></li><li><p>选择器前缀法<br><strong>注：为什么不推荐使用CSS hack来解决兼容性问题</strong></p><blockquote><p>CSS hack是因为现有浏览器对标准的解析不同，为了兼容各浏览器，所采用的一种补救方法。CSS hack是一种类似作弊的手段，以欺骗浏览器的方式达到兼容的目的，是用浏览器的兼容性差异来解决浏览器的兼容性问题的，以下我是通过hack标准整理的两点缺点：</p><ol><li>只针对太古老的/不再开发的/已被抛弃的浏览器， 而不是目前的主流浏览器；现在很多hacks已经抛弃了最初的原则，滥用hack也会导致浏览器更新之后可能产生更多的兼容性问题。</li><li>代码较繁杂<br>参考： <a href="https://www.cnblogs.com/guhui1994/p/5906268.html" target="_blank" rel="noopener">CSS常见兼容性问题总结</a>，<a href="http://www.cnblogs.com/Renyi-Fan/p/9006084.html" target="_blank" rel="noopener">css中hack是什么</a></li></ol></blockquote></li></ol></li><li>不同浏览器的标签默认的margin和padding值不同<ol><li>我们可以使用通配符，但是不推荐，而且它也并不完善<br><code>*{margin:0;padding:0}</code></li><li>第二就是进行样式初始化，下面贴一个淘宝的css样式初始化:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td &#123; margin:0; padding:0; &#125;</span><br><span class="line">body, button, input, select, textarea &#123; font:12px/1.5tahoma, arial, \5b8b\4f53; &#125;</span><br><span class="line">h1, h2, h3, h4, h5, h6&#123; font-size:100%; &#125;</span><br><span class="line">address, cite, dfn, em, var &#123; font-style:normal; &#125;</span><br><span class="line">code, kbd, pre, samp &#123; font-family:couriernew, courier, monospace; &#125;</span><br><span class="line">small&#123; font-size:12px; &#125;</span><br><span class="line">ul, ol &#123; list-style:none; &#125;</span><br><span class="line">a &#123; text-decoration:none; &#125;</span><br><span class="line">a:hover &#123; text-decoration:underline; &#125;</span><br><span class="line">sup &#123; vertical-align:text-top; &#125;</span><br><span class="line">sub&#123; vertical-align:text-bottom; &#125;</span><br><span class="line">legend &#123; color:#000; &#125;</span><br><span class="line">fieldset, img &#123; border:0; &#125;</span><br><span class="line">button, input, select, textarea &#123; font-size:100%; &#125;</span><br><span class="line">table &#123; border-collapse:collapse; border-spacing:0; &#125;</span><br><span class="line">            </span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li></li><li>JS部分</li></ol></li><li>谈一谈你是如何提高前端性能的</li><li>关于websocket心跳包有没有进行考虑<blockquote><p><strong>参考：</strong> <a href="http://www.cnblogs.com/1wen/p/5808276.html" target="_blank" rel="noopener">初探和实现websocket心跳重连</a></p></blockquote></li><li>CDN加速原理</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>钉钉电话面试</title>
      <link href="/2018/11/29/%E9%92%89%E9%92%89%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/11/29/%E9%92%89%E9%92%89%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p> 钉钉电话面试感觉是状态非常不好的一次面试，面试官非常直接，一上来就是你问我答环节，下面是面试官对我提出的一些问题：</p><ol><li>你是如何保证浏览器的兼容性的</li><li>如何实现一个文本垂直居中</li><li>display的可能值有多少<blockquote><ol><li>none: 此元素不会被显示</li><li>block: 元素以块级显示出来，前后都带有换行符；默认情况下，宽度会自动填满其父元素宽度</li><li>inline: 元素会被显示为内联， 改元素的宽度和高度是由内容自动展开的，因此对其设置高度和宽度是无效的；元素可以设置padding和margin,但是只在水平方向是有效的</li><li>inline-block: 既有block的设置宽高，margin,padding属性，又有inline元素的同行属性</li><li>list-item: 此元素会作为列表元素显示 </li></ol></blockquote></li><li>如何实现每个元素都在一行，而不会掉下来</li><li>你VUE了解多少</li><li>谈谈你在项目中遇到的难题，以及你是如何解决的<br>这种问题注重问题的解决过程<br>可以从并发、稳定性、容错、性能方面</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
