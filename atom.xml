<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>姚俊的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-22T17:35:54.422Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>胖胖</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>年会歌曲</title>
    <link href="http://yoursite.com/post/1351836919.html"/>
    <id>http://yoursite.com/post/1351836919.html</id>
    <published>2019-01-22T10:32:28.000Z</published>
    <updated>2019-01-22T17:35:54.422Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="enter password to read." />    <label for="pass">enter password to read.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密的文章。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过css用div画出三角形</title>
    <link href="http://yoursite.com/post/2276870894.html"/>
    <id>http://yoursite.com/post/2276870894.html</id>
    <published>2019-01-19T04:41:13.000Z</published>
    <updated>2019-01-19T06:06:32.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>通过css可以实现不同样式的三角形，其中的原理可以了解一下<a href="http://www.cnblogs.com/cchyao/archive/2010/07/12/1775846.html" target="_blank" rel="noopener">盒子模型</a>，闲言少叙，直接开始吧！</p><h2 id="基本入门"><a href="#基本入门" class="headerlink" title="基本入门"></a>基本入门</h2><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Static Template&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .angel &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            border-width: 100px 100px 100px 100px;</span><br><span class="line">            border-color: red yellow green gray;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            box-sizing: content-box;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;angel&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br>效果图如下：<br><img src="/post/2276870894/1.png"><br>代码17行作用是使用标准的盒子模型，如果使用IE盒子模型（box-sizing：border-box;），就不会出现中间的空白方块，大家可以自行测试。当我们调整width和height为5px，效果图如下：<br><img src="/post/2276870894/2.png"><br>当width和height为0时，效果图如下<br><img src="/post/2276870894/3.png"><br>感觉像不像四个三角形拼接在一起，如果我们想要绿色的三角形，我们可以把其它三个边框的颜色设置成transparent,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.angel &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            border-width: 100px 100px 100px 100px;</span><br><span class="line">            border-color: transparent transparent green transparent;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            box-sizing: content-box;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><br>效果图如下：<br><img src="/post/2276870894/4.png"><br>但是其它边的颜色已经透明，但是所占区域还是存在的，我们可以审查一下元素，如图所示：<br><img src="/post/2276870894/5.png"><br>因此我们把上边框的border-width设置为0，得到下图：<br><img src="/post/2276870894/6.png"><br>是不是我们想要达到的效果。我们也可以设置左边或者右边的border为0，得到该三角形其中的一半（也是一个三角形），代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.angel &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            border-width: 0 100px 100px 0;</span><br><span class="line">            border-color: transparent transparent green transparent;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            box-sizing: content-box;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><br>效果图如下：<br><img src="/post/2276870894/7.png"><br>因此通过调整border不同方向的width和color，我们就可以得到任意不同方向的三角形。</p><h2 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h2><h3 id="1-实现一个角度为30度的直角三角形"><a href="#1-实现一个角度为30度的直角三角形" class="headerlink" title="1. 实现一个角度为30度的直角三角形"></a>1. 实现一个角度为30度的直角三角形</h3><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.angel &#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            border-width: 0px 100px 173px 0px;</span><br><span class="line">            border-color: transparent transparent green transparent;</span><br><span class="line">            border-style: solid;</span><br><span class="line">            box-sizing: content-box;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><br>如图所示：<br><img src="/post/2276870894/8.png"></p><h3 id="2-实现一个带有边框的三角形"><a href="#2-实现一个带有边框的三角形" class="headerlink" title="2. 实现一个带有边框的三角形"></a>2. 实现一个带有边框的三角形</h3><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="http://www.cnblogs.com/v-weiwang/p/5057588.html" target="_blank" rel="noopener">css如何将div画成三角形</a></p></div> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h2&gt;&lt;p&gt;通过css可以实现不同样式的三角形，其中的原理可以了解一下&lt;a href=&quot;http://www.cnblogs.com/cchyao/ar
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angualr介绍</title>
    <link href="http://yoursite.com/post/2552726188.html"/>
    <id>http://yoursite.com/post/2552726188.html</id>
    <published>2019-01-19T03:16:59.000Z</published>
    <updated>2019-01-19T04:33:30.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><ol><li>编译的时候可以代码检查bug，从而减少运行时的bug</li><li>IDE更好的代码提示，和更快的性能</li><li>angular核心就是组件，装饰器模式</li><li>angular组件非常容易编写，装饰器模式更加人性化</li><li>服务器端渲染，可以增强性能也可以提高seo优化</li><li></li></ol><h2 id="Angular-CLI"><a href="#Angular-CLI" class="headerlink" title="Angular CLI"></a>Angular CLI</h2><h2 id="与React对比"><a href="#与React对比" class="headerlink" title="与React对比"></a>与React对比</h2><ol><li>React虚拟dom，先更新虚拟dom，在更新实际dom</li><li>Angular 新的变更检测算法</li><li>Angular 服务器端渲染，服务器预渲染首页加载优化，是seo引擎优化</li><li>单页缺陷是对seo很大缺陷</li></ol><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>不是完整的框架，第三方组件没有Angualr多</p><h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><p>简单<br>学习和使用不高，中文文档<br>cli更灵活<br>尺寸小，十几k<br>个人主导的，但是angular是google开发的，用的还是微软的typeScript<br>只关注web框架</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"></div> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;编译的时候可以代码检查bug，从而减少运行时的bug&lt;/li&gt;
&lt;li&gt;IDE更好的代码提示，和更快的性能&lt;/li&gt;
&lt;li&gt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>http请求头origin和referer区别</title>
    <link href="http://yoursite.com/post/2885576345.html"/>
    <id>http://yoursite.com/post/2885576345.html</id>
    <published>2019-01-17T07:37:00.000Z</published>
    <updated>2019-01-19T03:07:08.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>之前在做web项目中，每次使用chrome调试前端的时候经常会看到请求头header中经常会包含Referer和Origin字段，并且它俩的值有时长的还差不多，网上一查，它俩确实很相似，今天乘着闲暇的机会，整理一下它们各自的作用和区别。本人知识有限，如有错误欢迎留言指正。</p><h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><p>Referer其实应该是英文单词Referrer，不过拼错的人太多了，所以编写标准的人也就将错就错了。它是客户端请求头的一部分，当浏览器向web服务器发送请求的时候，<strong>一般会带上Referer</strong><font color="red">（不论是get请求还是post请求）</font>，告诉服务器我是从哪个页面链接过来的。比如说有个网址A：<code>https://mbd.baidu.com/newspage/data/landingsuper?context=%7B%22nid%22%3A%22news_1763945507961089360%22%7D&amp;n_type=0&amp;p_from=1</code>，A页面有个链接链接到了网站B：<code>https://mbd.baidu.com/newspage/data/landingsuper?context=%7B%22nid%22%3A%22news_9452777449866334360%22%7D&amp;n_type=0&amp;p_from=4</code>，如果你点击A页面的链接请求B页面，那么这时请求B页面的请求头中Referer就是A的网址：<code>https://mbd.baidu.com/newspage/data/landingsuper?context=%7B%22nid%22%3A%22news_9452777449866334360%22%7D&amp;n_type=0&amp;p_from=1</code>，你可以在B页面中调用浏览器的调试工具查看请求头验证一下。刚才说了<strong>一般会带上Referer</strong>，那么什么情况下不会带上呢？根据自己的验证和别人的分享，我总结出Referer的存在需要具备两个要素：</p><ol><li>浏览器（客户端）请求（服务器端请求的情况下，是不存在referer的，但是可以伪造header）</li><li>存在前导页，就是你的页面是从哪个页面链接过来的</li></ol><p>因此根据这两个要素，可以大致列举出不会带上Referer的几种情况如下：</p><ul><li>在浏览器内直接敲URL（没有前导页）</li><li>windows桌面上的超链接图标（原因同上）</li><li>浏览器内书签（同上）</li><li>第三方软件（如Word，Excel等）内容中的链接（不是浏览器）</li><li>使用JavaScript的Location.href或者是Location.replace()</li><li>SSL认证网站跳入(网站部署SSL证书后，可以通过在服务器设置301重定向让HTTP自动跳转到HTTPS，也可以通过设置JS跳转实现HTTP自动跳转到HTTPS）<br>然而在以下两种情况下，Referer不会被发送：</li></ul><ol><li>来源页面采用的协议为表示本地文件的 “file” 或者 “data” URI</li><li>当前请求页面采用的是非安全协议，而来源页面采用的是安全协议（HTTPS）</li></ol><div class="note danger"><p>Referer 首部可能暴露用户的浏览历史，涉及到用户的隐私问题。</p></div><h2 id="Referer的作用"><a href="#Referer的作用" class="headerlink" title="Referer的作用"></a>Referer的作用</h2><ul><li>统计访问这个页面从哪个前导页链接过来的次数</li><li>防止盗链，盗链的解释，请参考<a href="https://baike.baidu.com/item/%E7%9B%97%E9%93%BE?fr=aladdin" target="_blank" rel="noopener">百度百科</a>，当一个请求到达服务器，特别是CDN服务器的时候，CDN服务器可以根据该字段来判断来源站点是否是合作伙伴，或者是可信任的，然后再决定是否将资源返回给它</li><li>防止恶意请求，比如说只允许外部网站访问我的静态资源，对于动态资源，不允许从外部网站访问，这样在一定程度上可以避免CSRF攻击。当然了，依赖客户端的请求是很不可靠的，因为这个可以轻轻松松伪造。</li></ul><h2 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h2><p>请求首部字段 Origin 指示了请求来自于哪个站点。<strong>该字段仅指示服务器名称，并不包含任何路径信息</strong>。该首部<strong>只用于 CORS 请求或者 POST 请求</strong>。除了不包含路径信息，该字段与 Referer 首部字段相似。表现形式如下：<br><div class="note primary"><p>Origin: “”<br>Origin: <scheme> “://“ <host> [ “:” <port> ]</port></host></scheme></p></div><br>有时候将该字段的值置空是有用的，例如，资源由一个 data URL 指定</p><h2 id="Origin的作用"><a href="#Origin的作用" class="headerlink" title="Origin的作用"></a>Origin的作用</h2><p>从上面可以看出，其实referrer所能满足的要求，origin全部都能达到，事实上，origin的提出，本身就是在HTML5中跨域操作所引入的。 其具体流程是，当一个链接或者XMLHttpRequest去请求跨域操作，浏览器事实上的确向目标服务器发起了连接请求，并且携带这origin。 当服务器返回时，浏览器将检查response中是否包Access-Control-Allow-Origin字段，当缺少这个字段时，浏览器将abort，abort的意思是不显示，不产生事件，就好像没有请求过，甚至在network区域里面都看不到。 当存在这个header时，浏览器将检查当前请求所在域是否在这个access-control-allow-origin所允许的域内，如果是，继续下去，如果不存在，abort！</p><h2 id="两者主要区别"><a href="#两者主要区别" class="headerlink" title="两者主要区别"></a>两者主要区别</h2><ul><li>Origin不包含前导页任何的路径信息，但是Referer包含了前导页的路径信息，可能会透露出用户信息或者是用户浏览历史等隐私信息，因此Origin相对比Referer安全。</li><li>Referer不论是get请求和post请求都会存在，Origin当出现CORS时get和post请求都会出现，否则只会出现在post请求中。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://blog.csdn.net/fishmai/article/details/52388840" target="_blank" rel="noopener">Referer详解</a><br><a href="https://blog.csdn.net/zdavb/article/details/51161130" target="_blank" rel="noopener">彻底搞清referrer和origin</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h2&gt;&lt;p&gt;之前在做web项目中，每次使用chrome调试前端的时候经常会看到请求头header中经常会包含Referer和Origin字段，并且它俩的
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="header" scheme="http://yoursite.com/tags/header/"/>
    
      <category term="Origin" scheme="http://yoursite.com/tags/Origin/"/>
    
      <category term="Referer" scheme="http://yoursite.com/tags/Referer/"/>
    
  </entry>
  
  <entry>
    <title>详解http请求头host</title>
    <link href="http://yoursite.com/post/3695960831.html"/>
    <id>http://yoursite.com/post/3695960831.html</id>
    <published>2019-01-17T07:33:00.000Z</published>
    <updated>2019-01-17T15:49:38.860Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="header" scheme="http://yoursite.com/tags/header/"/>
    
      <category term="host" scheme="http://yoursite.com/tags/host/"/>
    
  </entry>
  
  <entry>
    <title>http header详解</title>
    <link href="http://yoursite.com/post/956247918.html"/>
    <id>http://yoursite.com/post/956247918.html</id>
    <published>2019-01-16T11:57:00.000Z</published>
    <updated>2019-01-16T14:46:12.919Z</updated>
    
    <content type="html"><![CDATA[<div class="note class_name"><p><a href="https://segmentfault.com/a/1190000008900299" target="_blank" rel="noopener">HTTP 最强资料大全</a><br><a href="http://www.cnblogs.com/Joans/p/3956490.html" target="_blank" rel="noopener">HTTP Header 详解</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note class_name&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000008900299&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTP 最强资料大全&lt;/a&gt;&lt;br&gt;&lt;a h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>http状态码详解</title>
    <link href="http://yoursite.com/post/432560822.html"/>
    <id>http://yoursite.com/post/432560822.html</id>
    <published>2019-01-16T11:13:29.000Z</published>
    <updated>2019-01-18T15:57:57.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1xx：指示信息，表示请求被接受，正在处理"><a href="#1xx：指示信息，表示请求被接受，正在处理" class="headerlink" title="1xx：指示信息，表示请求被接受，正在处理"></a>1xx：指示信息，表示请求被接受，正在处理</h2><ol><li>101 Switching Protocols：服务器将遵从客户端的请求转换到另外一种协议（HTTP1.1）</li></ol><h2 id="2xx：成功，表示请求正常处理完毕"><a href="#2xx：成功，表示请求正常处理完毕" class="headerlink" title="2xx：成功，表示请求正常处理完毕"></a>2xx：成功，表示请求正常处理完毕</h2><ol><li>200 OK（成功）:客户端请求成功</li><li>204 No Content（无内容）：服务器成功处理了请求，但没有返回任何内容。</li><li>206 Partial Content（部分内容）：客户发送了一个带有Range头的GET请求，服务器完成了它（代表服务器根据Range头返回了部分内容）</li></ol><h2 id="3xx：重定向，完成请求必须进行跟进一步的操作"><a href="#3xx：重定向，完成请求必须进行跟进一步的操作" class="headerlink" title="3xx：重定向，完成请求必须进行跟进一步的操作"></a>3xx：重定向，完成请求必须进行跟进一步的操作</h2><ol><li>301 Moved Permanently（永久移动）：所请求的页面已经永久转移至新的url，服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新url</li><li>302 Moved Provisionally（临时移动）：服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li><li>304 Not Modified（未修改）：自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容</li></ol><h2 id="4xx：客户端错误，请求有语法错误或者请求无法实现从而导致服务器无法处理请求"><a href="#4xx：客户端错误，请求有语法错误或者请求无法实现从而导致服务器无法处理请求" class="headerlink" title="4xx：客户端错误，请求有语法错误或者请求无法实现从而导致服务器无法处理请求"></a>4xx：客户端错误，请求有语法错误或者请求无法实现从而导致服务器无法处理请求</h2><ol><li>400 Bad Request（错误请求）：服务器不理解请求的语法</li><li>401 Unauthorized（请求未授权）：请求要求身份验证即发送请求需要Http的认证信息。 对于需要登录的网页，服务器可能返回此响应。</li><li>403 Forbidden（禁止访问）：请求资源的访问被拒绝</li><li>404 Not Found（没发现）：请求资源不存在</li></ol><h2 id="5xx：服务器处理请求出错-服务器未能实现合法的请求"><a href="#5xx：服务器处理请求出错-服务器未能实现合法的请求" class="headerlink" title="5xx：服务器处理请求出错,服务器未能实现合法的请求"></a>5xx：服务器处理请求出错,服务器未能实现合法的请求</h2><ol><li>500 Internal Server Error（服务器端错误）：服务器发生不可预期的错误</li><li>503 Server Unavailable（服务器不可用）：服务器目前无法使用（由于超载或停机维护）； 通常，这只是暂时状态</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://blog.csdn.net/hangmine/article/details/79010025" target="_blank" rel="noopener">常见的HTTP状态码(HTTP Status Code)说明</a><br><a href="https://segmentfault.com/a/1190000008900299" target="_blank" rel="noopener">HTTP 最强资料大全</a><br><a href="http://www.cnblogs.com/scyitgz/p/5216031.html" target="_blank" rel="noopener">一鸣先生 手稿</a><br><a href="https://blog.csdn.net/Rnger/article/details/82425961" target="_blank" rel="noopener">状态码401 和 403</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1xx：指示信息，表示请求被接受，正在处理&quot;&gt;&lt;a href=&quot;#1xx：指示信息，表示请求被接受，正在处理&quot; class=&quot;headerlink&quot; title=&quot;1xx：指示信息，表示请求被接受，正在处理&quot;&gt;&lt;/a&gt;1xx：指示信息，表示请求被接受，正在处理&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解vue的computed和watch区别</title>
    <link href="http://yoursite.com/post/21176862.html"/>
    <id>http://yoursite.com/post/21176862.html</id>
    <published>2019-01-12T03:19:58.000Z</published>
    <updated>2019-01-14T12:55:17.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>监控计算属性的变化（被动变化），主要是根据计算属性中所依赖值发生变化，从而得到新的值，计算属性可以不再data属性中申明，如果计算属性依赖的属性发生了变化，就会运行该computed函数得到计算属性新值，反之如果需要用到计算属性，就会从缓存里面去取，因此比methods性能更佳，其次Vue中的计算属性都是同步的，如果需要异步我们得依赖于<a href="https://github.com/foxbenjaminfox/vue-async-computed" target="_blank" rel="noopener">vue-async-computed</a>。<br>   <img src="/post/21176862/1.png"><br>   代码示例：<br>      <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=&quot;app&quot;&gt;&#123; &#123; fullName &#125; &#125;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;  </span><br><span class="line">        el: &apos;#app&apos;,  </span><br><span class="line">        data: &#123;  </span><br><span class="line">            firstName: &apos;Foo&apos;,  </span><br><span class="line">            lastName: &apos;Bar&apos;,  </span><br><span class="line">        &#125;,  </span><br><span class="line">        computed: &#123;  </span><br><span class="line">            fullName: function () &#123;  </span><br><span class="line">                return this.firstName + &apos; &apos; + this.lastName  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><br>代码中fullName就是计算属性，它所依赖的属性为firstName和lastName，如果它们发生任何变化，都会调用该计算属性函数，如果依赖没有变化，则不会调用，当需要fullName时候，会从缓存里面取。<br>计算属性默认是只有ES6的getter，当然可以在需要的时候自己设定ES6的setter:<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//...</span><br><span class="line">computed: &#123;</span><br><span class="line">    fullName: &#123;</span><br><span class="line">        // getter</span><br><span class="line">        get: function () &#123;</span><br><span class="line">            return this.firstName + &apos; &apos; + this.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        // setter</span><br><span class="line">        set: function (newValue) &#123;</span><br><span class="line">            var names = newValue.split(&apos; &apos;)</span><br><span class="line">            this.firstName = names[0]</span><br><span class="line">            this.lastName = names[names.length - 1]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><br>那么问题来了，既然computed有setter方法，不知道大家是不是和我想法一样，这样setter不就可以取代了watch了吗？关于这个疑问，我觉得有几点可以说明：</p><ol><li>watch函数可以传来两个参数，一个是新值一个是旧值，而计算属性函数只有一个新值的参数，虽然可以使用其它办法来获取旧值。   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line"> return &#123;</span><br><span class="line">     frontPoints: 0    </span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> watch: &#123;</span><br><span class="line">     frontPoints(newValue, oldValue) &#123;</span><br><span class="line">         console.log(newValue)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure></li><li>watch可以监控对象属性的变化,而setter不能是对象属性，个人觉得这一点是关键。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">　　return &#123;</span><br><span class="line">　　　　bet: &#123;</span><br><span class="line">　　　　　　pokerState: 53,</span><br><span class="line">　　　　　　pokerHistory: &apos;local&apos;</span><br><span class="line">　　　　&#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">　　bet: &#123;</span><br><span class="line">　　　　handler(newValue, oldValue) &#123;</span><br><span class="line">　　　　　　console.log(newValue)</span><br><span class="line">　　　　&#125;,</span><br><span class="line">　　　　deep: true</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>        <h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2>监控data中属性的变化（主动变化），如果该属性值变化，则会调用该watch函数，主要用来修改其它属性变量或处理一些复杂逻辑和异步操作；该变量必须是data中有的属性。<img src="/post/21176862/2.png">代码示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">        el: &apos;#app&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            firstName: &apos;Foo&apos;,</span><br><span class="line">            lastName: &apos;Bar&apos;,</span><br><span class="line">            fullName: &apos;Foo Bar&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            firstName: function (val) &#123;</span><br><span class="line">                this.fullName = val + &apos; &apos; + this.lastName</span><br><span class="line">            &#125;,</span><br><span class="line">            lastName: function (val) &#123;</span><br><span class="line">                this.fullName = this.firstName + &apos; &apos; + val</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">   </span><br></pre></td></tr></table></figure>当watch中的firstName和lastName值发生变化时，就会调用各自的函数。<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.w3cplus.com/vue/methods-computed-and-watchers-in-vue-js.html" target="_blank" rel="noopener">Vue中的方法，属性计算和观察者</a><br><a href="https://www.w3cplus.com/vue/vue-computed-intro.html" target="_blank" rel="noopener">Vue 2.0学习笔记： Vue中的computed属性</a><br>(<a href="https://blog.csdn.net/webxiaoma/article/details/72626439" target="_blank" rel="noopener">https://blog.csdn.net/webxiaoma/article/details/72626439</a>)<br>   <a href="https://www.cnblogs.com/widgetbox/p/8954162.html" target="_blank" rel="noopener">vue中methods、watch、computed之间的差别对比以及适用场景</a><br>   <a href="https://blog.csdn.net/zhumengzj/article/details/78742069" target="_blank" rel="noopener">vuejs - 如何对某个对象的属性进行watch监听？</a><br>   <a href="https://blog.csdn.net/u014298440/article/details/82942680" target="_blank" rel="noopener">Vue使用watch监听一个对象中的属性</a><br>   <a href="https://www.w3cplus.com/vue/methods-computed-and-watchers-in-vue-js.html" target="_blank" rel="noopener">Vue中的方法，属性计算和观察者</a></p></div> </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h2&gt;&lt;h2 id=&quot;computed&quot;&gt;&lt;a href=&quot;#computed&quot; class=&quot;headerlink&quot; title=&quot;computed&quot;
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Angular, Vue, React数据双向绑定原理</title>
    <link href="http://yoursite.com/post/3623552453.html"/>
    <id>http://yoursite.com/post/3623552453.html</id>
    <published>2019-01-09T11:35:59.000Z</published>
    <updated>2019-01-14T12:59:07.394Z</updated>
    
    <content type="html"><![CDATA[<div class="note default"><p><a href="https://www.jianshu.com/p/0520e1e8d23d" target="_blank" rel="noopener">angular,vue,react数据双向绑定原理分析</a><br><a href="https://www.cnblogs.com/samsara-yx/p/9456638.html" target="_blank" rel="noopener">angular 双向数据绑定与vue数据的双向数据绑定</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note default&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/0520e1e8d23d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;angular,vue,react数据双向绑定原理分析&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>细说table和div布局的优缺点</title>
    <link href="http://yoursite.com/post/4067833097.html"/>
    <id>http://yoursite.com/post/4067833097.html</id>
    <published>2019-01-09T10:51:00.000Z</published>
    <updated>2019-01-14T12:58:13.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>一开始接触前端时候使用的是table布局，当时感觉table布局真的很方便，并且可以使用DW软件来自动生成；但是随着所开发的页面复杂化和对性能的要求越来越高，table布局渐渐的展现出来它的不足了；现在table的布局方式已经被div+css布局方式替代了，但是也不排除市面上还有一些老系统仍然是table布局；下面针对这两种布局方式（<strong><em>table布局</em></strong>和<strong><em>div+css布局</em></strong>）来详细的讲解一下它们各自的优缺点。如有描述不正确，欢迎留言指正。</p><h2 id="div-css布局优缺点"><a href="#div-css布局优缺点" class="headerlink" title="div+css布局优缺点"></a>div+css布局优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>可以通过css样式给框架进行功能强大的属性设置以及给网页的局部进行任意的定位，制作出来的页面浏览速度较快，</li><li>页面的风格可以通过修改单独的css文件进行随意的修改和更新。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>对于开发者来说可能不熟悉css的开发人员来说上手比较慢，开发时间可能比较长。</p><h2 id="table布局优缺点"><a href="#table布局优缺点" class="headerlink" title="table布局优缺点"></a>table布局优缺点</h2><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li>开发时间短（使用DW开发速度快）。</li><li>纯table各浏览器不会有兼容问题。</li><li>内容可自适应。</li><li>在搜索引擎排名能靠前。</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li>如果布局变更，需要重新开发，灵活性比较差。</li><li>如果table里有div ul 等，可能会出现浏览器兼容问题。</li><li>加载速度慢<div class="note primary"><p>由于html文件中的table标签的浏览速度较慢，所以，使用嵌套表格的方法来布局网页框架会使网页浏览的速度变慢。因为table是中的内容是自适应的，为了自适应，它要计算嵌套最深的节点以满足自适应，所以有可能会有一断时间出现空白才显示。所以是会有问题的。 </p></div></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.cnblogs.com/nwj-0613/p/4775854.html" target="_blank" rel="noopener">HTML中table和div布局的优缺点</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h2&gt;&lt;p&gt;一开始接触前端时候使用的是table布局，当时感觉table布局真的很方便，并且可以使用DW软件来自动生成；但是随着所开发的页面复杂化和对性
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用hexo-admin随时随地发布hexo博客</title>
    <link href="http://yoursite.com/post/2981499989.html"/>
    <id>http://yoursite.com/post/2981499989.html</id>
    <published>2019-01-08T16:58:55.000Z</published>
    <updated>2019-01-14T13:13:27.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>之前通过github page和hexo框架搭建了一个博客系统，一开始在自己的电脑上写完hexo博客，然后敲点命令发布到github上，过程感觉不算太麻烦；但是如果当我们换一台电脑或者是你在公司或者网吧的时候一时兴起想写博客，那么你就必须要在手头上的电脑中配置hexo环境所需要的一系列依赖（其中的麻烦你懂的），才能写博客发布你的博客。为了能够更方便的随时随地都能写博客发布博客,我使用hexo-admin搭建了一个在线的hexo博客后台管理系统，下面我就来详细的讲解一下我的搭建流程，希望能够给大家带来帮助，如果描述有误，欢迎大家留言指正。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>本人自己有一台阿里云服务器，但是考虑到稳定性和安全性等问题，最后将hexo的静态页面部署github-pages上。现在我的需求有：</p><ol><li>拥有在线编辑博客的后台</li><li>本地机器同时也可以编辑发布博客</li><li>本地和线上要保持同步</li><li>由于我使用的是next的主题，也希望修改的主题功能也可以方便的同步</li></ol><h2 id="我所用到的工具"><a href="#我所用到的工具" class="headerlink" title="我所用到的工具"></a>我所用到的工具</h2><ol><li>hexo-admin</li><li>阿里云服务器</li><li>coding.net一个可以创建免费私有仓库的git服务器</li><li>github page</li></ol><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><ol><li>首先安装hexo-admin管理包，我的博客工程名称为blog，我就以blog来说，进入blog文件夹通过<code>npm install hexo-admin --save</code>（如果被墙可以使用<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝NPM镜像</a>）或者是<code>yarn add hexo-admin --save</code>（不懂yarn命令的可以自行百度）来安装hexo-admin。安装成功后我们可以使用命令<code>hexo s -d</code>来启动博客，之后访问‘localhost:4000/admin’打开博客管理系统，界面如下图：<img src="/post/2981499989/hexo_admin.png"></li><li>本地搭建后台管理系统成功，但是这样每个人都能访问我们的管理系统，因此我们需要为管理系统添加登录功能；为了实现该功能我们需要在<code>_config.yml</code>添加hexo-admin的admin选项，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  username: </span><br><span class="line">  password_hash: </span><br><span class="line">  secret: my super secret phrase</span><br><span class="line">  deployCommand: &apos;./hexo-deploy.sh&apos;</span><br></pre></td></tr></table></figure><code>username</code>是用户名可以自己任意起名，<code>password_hash</code>需要在步骤1中打开的博客管理系统中的Settings中获取，如下图：<img src="/post/2981499989/hexo_admin1.png">按图示点击，可以进入到以下界面：<img src="/post/2981499989/password.png">界面中画上红色圈的是我们填入的，可以任意填，之后你会看到username和password_hash会自动生成，入蓝色圈圈所示，把蓝色框中的值复制到对应的我们在<code>_config.yml</code>配置的admin选项中即可，如果配置成功，这时你重新打开管理系统就可以看到登录窗口，输入用户名和密码即可登录成功,如下图：<img src="/post/2981499989/login.png">对于<code>deployCommand</code>是你需要填入的执行脚本路径，该脚本是需要自己创建的，作用是在线发布博客（点击博客后台管理系统中Deploy选项的Deploy按钮即可一键部署)，其原理是通过node.js中的<code>child_process.spawn</code>来执行我们创建的部署脚本程序，脚本程序<code>hexo-deploy.sh</code>代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;start&quot;</span><br><span class="line">./server-upload.sh</span><br><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">gulp</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>上面代码的第4、5、7行是基本的hexo部署命令，不在累述，第6行是gulp命令，专门用来压缩静态资源文件（不懂的可以自行百度，这里不在累述），代码第3行引入了另一个脚本<code>server-upload.sh</code>，该脚本专门同步coding.net仓库中的源代码和merge代码，源码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;merge&apos;</span><br><span class="line">git pull origin master</span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;upload source code&apos;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li><li>为了保持博客的源代码线上线下同步，我把它托管到了coding.net中，这样就可以通过git来保持源代码的一致性（不要忘了给你的本地电脑和线上服务器配置公钥，否则每次都需要输入用户名和密码）；具体配置可以自行百度，这里不再累述。</li><li>我的博客用的是next主题。由于主题也是通过git clone下来的，一开始我是把next主题也一起同步到coding.net仓库中，但是当我再重新从我的仓库中git clone我的博客后，运行<code>hexo s -d</code>命令是会报错误<code>no the layout named index.html</code>，网上查了一下，必须要独立的git clone才能没有问题。因此我单独为next主题创建了coding.net仓库，之后通过在blog/themes文件夹下git clone主题即可。如果我修改了next主题，也需要及时的merge到coding.net仓库中，这样才能保持next主题同步。还有一点需要注意的是主题文件修改之后，你再进行复制主题文件，你会惊奇的发现，你复制的主题文件又回到了你修改之前的状态，因此这点需要主题，必要的时候你需要对比文件手动修改。</li><li>有了本地的后台管理系统，也把博客和主题源代码托管到coding.net中了，但是我们还需要把它部署到线上，这样我们才能随时随地可以通过浏览器访问；我是通过阿里云服务器搭建的hexo系统，具体搭建步骤和本地一模一样。就是通过git命令把博客和主题源代码clone下来，之后通过<code>npm install</code>或者<code>yarn install</code>命令下载依赖包，这样就搭建成功，是不是很简单！！！。一开始我们使用<code>hexo s -d</code>来启动我们的后台管理系统，但是如果我们退出该命令，或者命令窗口关闭，则该进程就关闭了，为了可以让博客管理系统可以一直在后台进程运行，可以使用<code>nohup s -d -p 80 &amp;</code>命令，其中<code>-p 80</code>是指定端口号为80端口，也可以不写，因为默认是4000端口。</li><li>如果以上步骤都配置成功，就可以通过你的<code>服务器IP+端口号/admin</code>进入在线博客后台系统了，你可以编辑你的博客、添加博客等等，之后点击deploy按钮（可能等待时间会长一点）,如果部署成功会出现以下界面：<img src="/post/2981499989/deploy.png"><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.jianshu.com/p/68e727dda16d" target="_blank" rel="noopener">如何优雅地发布Hexo博客</a><br><a href="https://segmentfault.com/a/1190000010434546" target="_blank" rel="noopener">hexo-admin后台管理博客</a><br><a href="https://www.jianshu.com/p/d174a6dc1b94" target="_blank" rel="noopener">Hexo博客SEO优化</a><br><a href="https://www.jianshu.com/p/393d067dba8d" target="_blank" rel="noopener">Hexo之next主题设置首页不显示全文(只显示预览)</a><br><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">使用Hexo+Github一步步搭建属于自己的博客（基础）</a><br><a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a><br><a href="https://www.jianshu.com/p/2f39de746900" target="_blank" rel="noopener">word在线预览功能</a><br><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt博客加密插件</a><br><a href="https://www.jianshu.com/p/1ff2fcbdd155" target="_blank" rel="noopener">Hexo博客第三方主题next进阶教程</a><br><a href="http://blog.heyuhua.xyz/2018/09/08/hexo+next%E8%AE%BE%E7%BD%AE%E7%9B%B8%E5%85%B3/" target="_blank" rel="noopener">hexo+next设置相关</a><br><a href="https://blog.csdn.net/blue_zy/article/details/79071414" target="_blank" rel="noopener">为你的Hexo加上评论系统-Valine</a></p></div></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h2&gt;&lt;p&gt;之前通过github page和hexo框架搭建了一个博客系统，一开始在自己的电脑上写完hexo博客，然后敲点命令发布到github上，过程
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
      <category term="hexo-admin" scheme="http://yoursite.com/tags/hexo-admin/"/>
    
  </entry>
  
  <entry>
    <title>CSS左边固定右边自适应布局的几种方式</title>
    <link href="http://yoursite.com/post/915039209.html"/>
    <id>http://yoursite.com/post/915039209.html</id>
    <published>2019-01-06T04:56:19.000Z</published>
    <updated>2019-01-14T12:55:17.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>在我们平常的布局中两栏布局是很常见的一种布局方式，并且对于两栏布局的实现方式也是层出不穷；之前忙于工作和happy，没有时间去整理这方面知识，今天抽空总结一下，一方面可以提升和巩固自己的知识，二者也可以分享给大伙儿，更易于大家的理解和掌握。由于自己的水平有限，如果文章有任何问题，欢迎大家积极留言评论指正。</p><h2 id="1-根据css计算属性calc和display-inline-block实现左边固定右边自适应布局"><a href="#1-根据css计算属性calc和display-inline-block实现左边固定右边自适应布局" class="headerlink" title="1. 根据css计算属性calc和display:inline-block实现左边固定右边自适应布局"></a>1. 根据css计算属性calc和display:inline-block实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/2wq24y4wnp" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p> 在display:inline-block中，如何有换行符和空格符的话，就会产生inline-block元素之前有间隙，因此我们在父元素中把字符的font-size设为0。关于inlin-block去间隙问题可以参考：<a href="https://blog.csdn.net/gladys_1111/article/details/77279985" target="_blank" rel="noopener">inline-block布局产生间隙的原因及解决办法（水平、垂直）</a>。</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3> <img src="/post/915039209/calc.png"><h2 id="2-根据css计算属性calc和display-float实现左边固定右边自适应布局"><a href="#2-根据css计算属性calc和display-float实现左边固定右边自适应布局" class="headerlink" title="2. 根据css计算属性calc和display:float实现左边固定右边自适应布局"></a>2. 根据css计算属性calc和display:float实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/1zr2zj18o4" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h2 id="3-根据float和margin实现左边固定右边自适应布局"><a href="#3-根据float和margin实现左边固定右边自适应布局" class="headerlink" title="3. 根据float和margin实现左边固定右边自适应布局"></a>3. 根据float和margin实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/yv48893om1" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h3><p>因为左边是浮动布局，右边是块布局，因此右边的div会自动充满一行；如果右边不设置margin，那么右边的一部分就和左边重叠，加入我们要给右边要设置左边边框，那么就达不到我们想要的效果。因此我们通过设置margin-left为左边的宽度，使得左右刚好不重叠。</p><h2 id="4-根据float和overflow实现左边固定右边自适应布局"><a href="#4-根据float和overflow实现左边固定右边自适应布局" class="headerlink" title="4. 根据float和overflow实现左边固定右边自适应布局"></a>4. 根据float和overflow实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/jp3x90vml3" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-2"><a href="#Note-2" class="headerlink" title="Note"></a>Note</h3><p>这种实现方式感觉和上面一种实现方式很像，区别就是上面通过margin来处理重叠，而本方法是通过overflow：hidden来处理重叠，其原理是如果元素设置了overflow:hidden，这样就使它成为了一个BFC容器，因为BFC有个规则是：<strong>BFC的区域不会与float box重叠</strong>，正好是我想要的效果，关于BFC的特性可以参考：<a href="https://yaojunblog.cn/2018/12/12/BFC%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">BFC到底是什么</a>，这种方式如果左边不设置宽度<strong>就可以实现左边自动撑开右边自适应布局</strong>。</p><h2 id="5-根据absolute和margin实现左边固定右边自适应布局"><a href="#5-根据absolute和margin实现左边固定右边自适应布局" class="headerlink" title="5. 根据absolute和margin实现左边固定右边自适应布局"></a>5. 根据absolute和margin实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/4xp8o28vo9" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-3"><a href="#Note-3" class="headerlink" title="Note"></a>Note</h3><p>这种方式和float+margin方式很像，但是需要注意的是absolute的布局的父元素是非static元素。因此如果要使用这种方式，就需要把父元素设置成非static布局。</p><h2 id="6-仅根据absolute-left实现左边固定右边自适应布局"><a href="#6-仅根据absolute-left实现左边固定右边自适应布局" class="headerlink" title="6. 仅根据absolute+left实现左边固定右边自适应布局"></a>6. 仅根据absolute+left实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/2p8n6o0zyp" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-4"><a href="#Note-4" class="headerlink" title="Note"></a>Note</h3><p>通过absolute布局让容器脱离的文档流，之后通过left属性进行偏移。</p><h2 id="7-display-table布局实现左边固定右边自适应布局"><a href="#7-display-table布局实现左边固定右边自适应布局" class="headerlink" title="7. display:table布局实现左边固定右边自适应布局"></a>7. display:table布局实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/kpj95xqmr" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-5"><a href="#Note-5" class="headerlink" title="Note"></a>Note</h3><p>通过display:table可以使得元素拥有table的特性，因此可以通过table特性来达到其效果；其实我们也可以通过使用真正的table标签来实现其功能，在这里我就不累述了，有兴趣大家可以自己去实现以下。</p><h2 id="8-flex布局实现左边固定右边自适应布局"><a href="#8-flex布局实现左边固定右边自适应布局" class="headerlink" title="8. flex布局实现左边固定右边自适应布局"></a>8. flex布局实现左边固定右边自适应布局</h2><iframe src="https://codesandbox.io/embed/wo44m0zkol" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><h3 id="Note-6"><a href="#Note-6" class="headerlink" title="Note"></a>Note</h3><p>flex布局正在改变传统的布局方式，让布局变得更简单。如果你对flex布局还是不很了解，请参考：<a href="https://www.w3cplus.com/css3/understanding-flexbox-everything-you-need-to-know.html" target="_blank" rel="noopener">理解Flexbox：你需要知道的一切</a></p><h3 id="兼容性-1"><a href="#兼容性-1" class="headerlink" title="兼容性"></a>兼容性</h3><img src="/post/915039209/flex.png"><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.cnblogs.com/wangzhenyu666/p/7904522.html" target="_blank" rel="noopener">css实现两栏布局，左侧固定宽，右侧自适应的7中方法</a><br><a href="https://blog.csdn.net/gladys_1111/article/details/77279985" target="_blank" rel="noopener">inline-block布局产生间隙的原因及解决办法（水平、垂直）</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h2&gt;&lt;p&gt;在我们平常的布局中两栏布局是很常见的一种布局方式，并且对于两栏布局的实现方式也是层出不穷；之前忙于工作和happy，没有时间去整理这方面知识
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="两栏布局" scheme="http://yoursite.com/tags/%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vue双向绑定原理笔录</title>
    <link href="http://yoursite.com/post/2399374655.html"/>
    <id>http://yoursite.com/post/2399374655.html</id>
    <published>2019-01-01T12:35:10.000Z</published>
    <updated>2019-01-15T16:50:36.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p><script src="https://gist.github.com/xtylovesyj/210e36aec55099b2ff9dcc4b1448e536.js"></script></p><p><script src="https://gist.github.com/xtylovesyj/6f3ab21ccc2421b0dfec94b0b2ce3bbe.js"></script></p><p><script src="https://gist.github.com/xtylovesyj/2b3a69b52b97f7f1176ef1b766dfd3bc.js"></script></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.cnblogs.com/libin-1/p/6893712.html" target="_blank" rel="noopener"><font color="red">vue的双向绑定原理及实现</font></a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h2&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/xtylovesyj/210e36aec55099b2ff9dcc
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="双向绑定原理" scheme="http://yoursite.com/tags/%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>location.hash笔录</title>
    <link href="http://yoursite.com/post/2217945891.html"/>
    <id>http://yoursite.com/post/2217945891.html</id>
    <published>2019-01-01T08:45:00.000Z</published>
    <updated>2019-01-14T12:55:17.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>在没有认识location.hash的时候，我每次实现在某个页面定位到特定的可视区域的时，都是通过scrollTop属性来实现。一次偶然的机会让我接触到了location.hash这个属性，才知道可以通过它很轻松的搞定我刚刚提到的需求；经过我进一步对location.hash的研究和了解，才知道这个属性的功能之强大，下面结合我所学的知识来总结一下我所认识的location.hash。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在浏览器的url中，如果存在“#”，那么第一个“#”字符本身以及它后面的任何字符称之为hash，可通过window.location.hash属性读取，并且“#”后面的字符会被浏览器解读为位置标识符。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li><strong>“#”后面的值为位置标识符，它可以使得页面滚动到特定区域</strong>。比如说url为：<br> <code>http://www.example.com/index.html#print</code><br> print代表着index.html页面的位置，当浏览器解析该url时候，就会自动将print位置滚动到可视区域。<br> 为网页位置指定标识符，有两中方式：<br> 一. 使用锚点，比如<code>&lt;a name=&quot;print&quot;&gt;&lt;/a&gt;</code><br> 二. 使用id属性，比如<code>&lt;div id=&quot;print&quot;&gt;</code><br> 这样浏览器会自动将含有该锚点或者id的标签滚动到可视区域。</li><li><strong>hash（#）虽然出现在url中，但不会被包括在http请求中，它是用来指导浏览器动作的，对服务器端完全无用，因此，改变hash不会重新加载页面</strong>。比如说通过url访问：<code>https://www.baidu.com/#123</code>, 查看该请求头，如下图所示：<br><img src="/images/pasted-1.png" alt="upload successful">发现hash已经被浏览器请求忽略，已经不存在“#123”。</li><li><strong>可以为hash的改变添加HTML5的监听事件</strong>, <code>window.addEventListener(&quot;hashchange&quot;,funcRef,false)</code></li><li><strong>每一次改变hash(window.location.hash)，都会在浏览器访问历史中增加一个记录</strong>。</li></ol><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ol><li>基于hash位置标识符的特性，可以实现某些页面的置顶和置底功能等。</li><li>基于上面hash的2，3，4特性，可以实现SPA（单页面应用程序）的路由功能；实现原理可以参考大漠老是的<a href="https://www.w3cplus.com/javascript/front-end-routing.html" target="_blank" rel="noopener">前端路由一探</a>。<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.cnblogs.com/yeer/archive/2013/01/21/2869827.html" target="_blank" rel="noopener">location.hash详解</a><br><a href="https://segmentfault.com/a/1190000014822765" target="_blank" rel="noopener">vue:路由实现原理</a></p></div></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h2&gt;&lt;p&gt;在没有认识location.hash的时候，我每次实现在某个页面定位到特定的可视区域的时，都是通过scrollTop属性来实现。一次偶然的机
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="hash" scheme="http://yoursite.com/tags/hash/"/>
    
      <category term="location" scheme="http://yoursite.com/tags/location/"/>
    
  </entry>
  
  <entry>
    <title>vue路由实现原理</title>
    <link href="http://yoursite.com/post/3881355925.html"/>
    <id>http://yoursite.com/post/3881355925.html</id>
    <published>2018-12-30T14:06:11.000Z</published>
    <updated>2019-01-14T12:55:17.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.w3cplus.com/javascript/front-end-routing.html" target="_blank" rel="noopener">前端路由一探</a><br><a href="https://www.cnblogs.com/yeer/archive/2013/01/21/2869827.html" target="_blank" rel="noopener">location.hash详解</a><br><a href="https://segmentfault.com/a/1190000014822765" target="_blank" rel="noopener">vue:路由实现原理</a></p></div> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h2&gt;&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>js继承那些事儿</title>
    <link href="http://yoursite.com/post/872881073.html"/>
    <id>http://yoursite.com/post/872881073.html</id>
    <published>2018-12-29T13:50:35.000Z</published>
    <updated>2019-01-14T12:55:17.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="闲言"><a href="#闲言" class="headerlink" title="闲言"></a>闲言</h2><p>之前在公司做项目的时候用到了ES6中class的继承特性，和java等其它语言一样，只需要使用extends关键字就可以轻松搞定继承。那么ES6的继承原理和之前JS的继承原理是一样的吗？带着心中的疑惑，我通过查找相关资料和自己的总结写出了这篇文章。</p><h2 id="ES5继承"><a href="#ES5继承" class="headerlink" title="ES5继承"></a>ES5继承</h2><p>在js世界里，继承的方式有很多，有<strong>原型链继承</strong>、<strong>构造继承</strong>、<strong>实例继承</strong>、<strong>拷贝继承</strong>、<strong>组合继承</strong>和<strong>寄生组合继承</strong>等，它们的原理和优缺点可以参考<a href="https://www.cnblogs.com/humin/p/4556820.html" target="_blank" rel="noopener">JS实现继承的几种方式</a>，其中寄生组合继承是最优的一种继承方式，下面我重点介绍一下它的原理。<br><strong>寄生组合继承</strong>：主要通过<strong>原型链继承</strong>和<strong>构造继承</strong>进行结合，之后通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性。废话不多说，直接上代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个动物类</span><br><span class="line">function Animal (name) &#123;</span><br><span class="line">// 属性</span><br><span class="line">this.name = name || &apos;Animal&apos;;</span><br><span class="line">// 实例方法</span><br><span class="line">this.sleep = function()&#123;</span><br><span class="line">    console.log(this.name + &apos;正在睡觉！&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 原型方法</span><br><span class="line">Animal.prototype.eat = function(food) &#123;</span><br><span class="line">console.log(this.name + &apos;正在吃：&apos; + food);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Cat(name)&#123;</span><br><span class="line">Animal.call(this);</span><br><span class="line">this.name = name || &apos;Tom&apos;;</span><br><span class="line">&#125;</span><br><span class="line">(function()&#123;</span><br><span class="line">// 创建一个没有实例方法的类</span><br><span class="line">var Super = function()&#123;&#125;;</span><br><span class="line">Super.prototype = Animal.prototype;</span><br><span class="line">//将实例作为子类的原型</span><br><span class="line">Cat.prototype = new Super();</span><br><span class="line">Cat.prototype.constructor = Cat;</span><br><span class="line">&#125;)();</span><br><span class="line">// Test Code</span><br><span class="line">var cat = new Cat();</span><br><span class="line">console.log(cat.name);</span><br><span class="line">console.log(cat.sleep());</span><br><span class="line">console.log(cat instanceof Animal); // true</span><br><span class="line">console.log(cat instanceof Cat); //true</span><br><span class="line"> </span><br></pre></td></tr></table></figure><br> <strong>Note:</strong> <em>对于上面的代码，不知道有没有人和我产生同样的疑惑：为什么不直接把Cat.prototype = Animal.prototype呢？这样cat的实例不就可以拿到Animal中的原型属性或者方法了嘛，为什么需要通过实例化对象的方式呢？其实是因为如果使用Cat.prototype = Animal.prototype的方式，那么我如果通过Cat.prototype去增加一些原型属性和方法的话，那么继承Animal的其它子类也会相应的增加，因为Animal的子类共用一个原型，所以是我们不希望看到的。如果通过实例化对象，那么Animal的每个子类都有自己独立的原型，并且这个原型也指向了Animal的原型。</em><br> 由于上面的代码没有用到ES5中的新特新，下面我使用ES5Object.create和Object.defineProperties的特性（不懂的可以参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">MDN web docs</a>）重写改写代码，最终ES5寄生组合继承的代码如下。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// 定义一个动物类</span><br><span class="line">function Animal (name) &#123;</span><br><span class="line">// 属性</span><br><span class="line">this.name = name || &apos;Animal&apos;;</span><br><span class="line">// 实例方法</span><br><span class="line">this.sleep = function()&#123;</span><br><span class="line">    console.log(this.name + &apos;正在睡觉！&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 原型方法</span><br><span class="line">Animal.prototype.eat = function(food) &#123;</span><br><span class="line">console.log(this.name + &apos;正在吃：&apos; + food);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function Cat(name)&#123;</span><br><span class="line">Animal.call(this);</span><br><span class="line">this.name = name || &apos;Tom&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过Object.create创建一个对象，</span><br><span class="line">并且这个对象的原型指向了Super.prototype,</span><br><span class="line">之后把这个对象增加了一个属性constructor,值为Cat</span><br><span class="line">Cat.prototpye = Object.create(Super.prototype,&#123;</span><br><span class="line">    constructor: &#123;</span><br><span class="line">        value: Cat,</span><br><span class="line">        enumerable: false,</span><br><span class="line">        writable: true,</span><br><span class="line">        configurable: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Test Code</span><br><span class="line">var cat = new Cat();</span><br><span class="line">console.log(cat.name);</span><br><span class="line">console.log(cat.sleep());</span><br><span class="line">console.log(cat instanceof Animal); // true</span><br><span class="line">console.log(cat instanceof Cat); //true</span><br><span class="line"> </span><br></pre></td></tr></table></figure><br>看完代码之后，通过一张图来系统性的理解一下ES5的继承原理</p><img src="/post/872881073/es5.JPEG"><h2 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h2><p>如果想了解ES6的class的继承方式，就必须了解ES6代码通过babel转码后的源码，下面通过ES6创建一个class类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Parent &#123;</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    speakSomething()&#123;</span><br><span class="line">        console.log(&quot;I can speek chinese&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>经过转码后<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var _createClass = function () &#123;</span><br><span class="line">    function defineProperties(target, props) &#123;</span><br><span class="line">        for (var i = 0; i &lt; props.length; i++) &#123;</span><br><span class="line">            var descriptor = props[i];</span><br><span class="line">            descriptor.enumerable = descriptor.enumerable || false;</span><br><span class="line">            descriptor.configurable = true;</span><br><span class="line">            if (&quot;value&quot; in descriptor) descriptor.writable = true;</span><br><span class="line">            Object.defineProperty(target, descriptor.key, descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return function (Constructor, protoProps, staticProps) &#123;</span><br><span class="line">        if (protoProps) defineProperties(Constructor.prototype, protoProps);</span><br><span class="line">        if (staticProps) defineProperties(Constructor, staticProps);</span><br><span class="line">        return Constructor;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">function _classCallCheck(instance, Constructor) &#123;</span><br><span class="line">    if (!(instance instanceof Constructor)) &#123;</span><br><span class="line">        throw new TypeError(&quot;Cannot call a class as a function&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Parent = function () &#123;</span><br><span class="line">    function Parent(name, age) &#123;</span><br><span class="line">        _classCallCheck(this, Parent);</span><br><span class="line"></span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _createClass(Parent, [&#123;</span><br><span class="line">        key: &quot;speakSomething&quot;,</span><br><span class="line">        value: function speakSomething() &#123;</span><br><span class="line">            console.log(&quot;I can speek chinese&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    return Parent;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><br>可以看到ES6类的底层还是通过构造函数去创建的。通过ES6创建的类，是不允许你直接调用的。在ES5中，构造函数是可以直接运行的，比如Parent()。但是在ES6就不行。我们可以看到转码的构造函数中有_classCallCheck(this, Parent)语句,这句话是防止你通过构造函数直接运行的。你直接在ES6运行Parent(),这是不允许的,ES6中抛出Class constructor Parent cannot be invoked without ‘new’错误。转码后的会抛出Cannot call a class as a function.我觉得这样的规范挺好的，能够规范化类的使用方式。<br>转码中_createClass方法，它调用Object.defineProperty方法去给新创建的Parent添加各种属性。defineProperties(Constructor.prototype, protoProps)是给原型添加属性。如果你有静态属性，会直接添加到构造函数上defineProperties(Constructor, staticProps)。但是貌似并没有用到，下面可以证明。这两个流程走下来，其实就创建了一个类。</p><p>上面讲的是创建一个类的过程，那ES6如何实现继承的呢？还是上面的例子，这次我们给Parent添加静态属性，原型属性，内部属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Parent &#123;</span><br><span class="line">    static height = 12</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    speakSomething()&#123;</span><br><span class="line">        console.log(&quot;I can speek chinese&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.color = &apos;yellow&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//定义子类，继承父类</span><br><span class="line">class Child extends Parent &#123;</span><br><span class="line">    static width = 18</span><br><span class="line">    constructor(name,age)&#123;</span><br><span class="line">        super(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    coding()&#123;</span><br><span class="line">        console.log(&quot;I can code JS&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var c = new Child(&quot;job&quot;,30);</span><br><span class="line">c.coding()</span><br></pre></td></tr></table></figure><br>经过babel转码后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var _createClass = function () &#123;</span><br><span class="line">    function defineProperties(target, props) &#123;</span><br><span class="line">        for (var i = 0; i &lt; props.length; i++) &#123;</span><br><span class="line">            var descriptor = props[i];</span><br><span class="line">            descriptor.enumerable = descriptor.enumerable || false;</span><br><span class="line">            descriptor.configurable = true;</span><br><span class="line">            if (&quot;value&quot; in descriptor) descriptor.writable = true;</span><br><span class="line">            Object.defineProperty(target, descriptor.key, descriptor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return function (Constructor, protoProps, staticProps) &#123;</span><br><span class="line">        if (protoProps) defineProperties(Constructor.prototype, protoProps);</span><br><span class="line">        if (staticProps) defineProperties(Constructor, staticProps);</span><br><span class="line">        return Constructor;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">function _possibleConstructorReturn(self, call) &#123;</span><br><span class="line">    if (!self) &#123;</span><br><span class="line">        throw new ReferenceError(&quot;this hasn&apos;t been initialised - super() hasn&apos;t been called&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return call &amp;&amp; (typeof call === &quot;object&quot; || typeof call === &quot;function&quot;) ? call : self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _inherits(subClass, superClass) &#123;</span><br><span class="line">    if (typeof superClass !== &quot;function&quot; &amp;&amp; superClass !== null) &#123;</span><br><span class="line">        throw new TypeError(&quot;Super expression must either be null or a function, not &quot; + typeof superClass);</span><br><span class="line">    &#125;</span><br><span class="line">    subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">        constructor: &#123;</span><br><span class="line">            value: subClass,</span><br><span class="line">            enumerable: false,</span><br><span class="line">            writable: true,</span><br><span class="line">            configurable: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _classCallCheck(instance, Constructor) &#123;</span><br><span class="line">    if (!(instance instanceof Constructor)) &#123;</span><br><span class="line">        throw new TypeError(&quot;Cannot call a class as a function&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var Parent = function () &#123;</span><br><span class="line">    function Parent(name, age) &#123;</span><br><span class="line">        _classCallCheck(this, Parent);</span><br><span class="line"></span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _createClass(Parent, [&#123;</span><br><span class="line">        key: &quot;speakSomething&quot;,</span><br><span class="line">        value: function speakSomething() &#123;</span><br><span class="line">            console.log(&quot;I can speek chinese&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    return Parent;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">Parent.height = 12;</span><br><span class="line"></span><br><span class="line">Parent.prototype.color = &apos;yellow&apos;;</span><br><span class="line"></span><br><span class="line">//定义子类，继承父类</span><br><span class="line"></span><br><span class="line">var Child = function (_Parent) &#123;</span><br><span class="line">    _inherits(Child, _Parent);</span><br><span class="line"></span><br><span class="line">    function Child(name, age) &#123;</span><br><span class="line">        _classCallCheck(this, Child);</span><br><span class="line"></span><br><span class="line">        return _possibleConstructorReturn(this, (Child.__proto__ || Object.getPrototypeOf(Child)).call(this, name, age));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _createClass(Child, [&#123;</span><br><span class="line">        key: &quot;coding&quot;,</span><br><span class="line">        value: function coding() &#123;</span><br><span class="line">            console.log(&quot;I can code JS&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]);</span><br><span class="line"></span><br><span class="line">    return Child;</span><br><span class="line">&#125;(Parent);</span><br><span class="line"></span><br><span class="line">Child.width = 18;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var c = new Child(&quot;job&quot;, 30);</span><br><span class="line">c.coding();</span><br></pre></td></tr></table></figure><br>我们可以看到，构造类的方法都没变，只是添加了<em>inherits核心方法来实现继承，下面我们把这个方法中主要的两段代码提取出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line">        constructor: &#123;</span><br><span class="line">            value: subClass,</span><br><span class="line">            enumerable: false,</span><br><span class="line">            writable: true,</span><br><span class="line">            configurable: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><br>这一段代码可以看出来，就和ES5中寄生组合继承中实现原型链继承的方式一样，这说明ES6实现原型上面的继承和之前js继承原理是一样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</span><br></pre></td></tr></table></figure><br>这段代码中的Object.setPrototypeOf方法可以让一个对象(第一个参数)的隐含指针_proto</em>指向另一个对象（第二个参数），这样处理是因为<br>现代 JavaScript 引擎优化属性访问所带来的特性的关系，更改对象的 [[Prototype]]在各个浏览器和 JavaScript 引擎上都是一个很慢的操作。其在更改继承的性能上的影响是微妙而又广泛的，这不仅仅限于 obj.<strong>proto</strong> = … 语句上的时间花费，而且可能会延伸到任何代码，那些可以访问任何[[Prototype]]已被更改的对象的代码。如果你关心性能，你应该避免设置一个对象的 [[Prototype]]。相反，你应该使用 Object.create()来创建带有你想要的[[Prototype]]的新对象<br>抛开性能，因此我们可以把上面代码简化为 <code>subClass.__proto__ = superClass</code><br>总结下来，_inherits核心思想就是下面两句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subClass.prototype.__proto__ = superClass.prototype</span><br><span class="line">subClass.__proto__ = superClass</span><br></pre></td></tr></table></figure><br>研究完代码，来一张图开森开森</p><img src="/post/872881073/es6.JPEG"><p>那为什么这样一倒腾，它就实现了继承了呢?<br>首先 subClass.prototype.<strong>proto</strong> = superClass.prototype保证了c instanceof Parent是true,Child的实例可以访问到父类的属性，包括内部属性，以及原型属性。其次，subClass.<strong>proto</strong> = superClass，保证了Child.height也能访问到，也就是静态方法。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p><a href="https://www.cnblogs.com/humin/p/4556820.html" target="_blank" rel="noopener">js实现继承的几种方式</a><br><a href="https://segmentfault.com/a/1190000014798678" target="_blank" rel="noopener">ES6类以及继承的实现原理</a><br><a href="https://baijiahao.baidu.com/s?id=1593627663270143849&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">两张图看懂ES5和ES6中的继承，值得收藏</a></p></div> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;闲言&quot;&gt;&lt;a href=&quot;#闲言&quot; class=&quot;headerlink&quot; title=&quot;闲言&quot;&gt;&lt;/a&gt;闲言&lt;/h2&gt;&lt;p&gt;之前在公司做项目的时候用到了ES6中class的继承特性，和java等其它语言一样，只需要使用extends关键字就可以轻松搞定继承。那么E
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="es5" scheme="http://yoursite.com/tags/es5/"/>
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>It&#39;s Nap Time</title>
    <link href="http://yoursite.com/post/400497674.html"/>
    <id>http://yoursite.com/post/400497674.html</id>
    <published>2018-12-29T13:15:49.000Z</published>
    <updated>2019-01-14T12:55:17.521Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mr-Mishima-a-Japanese-tourist-enters-a-bank-in-Milan-Italy-M-Mishima-T-bank-teller"><a href="#Mr-Mishima-a-Japanese-tourist-enters-a-bank-in-Milan-Italy-M-Mishima-T-bank-teller" class="headerlink" title="Mr. Mishima, a Japanese tourist, enters a bank in Milan, Italy.(M=Mishima; T=bank teller)"></a>Mr. Mishima, a Japanese tourist, enters a bank in Milan, Italy.(M=Mishima; T=bank teller)</h2><h2 id="M-Uh-excuse-me…"><a href="#M-Uh-excuse-me…" class="headerlink" title="M: Uh, excuse me…"></a>M: Uh, excuse me…</h2><h2 id="T-Zzzzzz…"><a href="#T-Zzzzzz…" class="headerlink" title="T: Zzzzzz…"></a>T: Zzzzzz…</h2><h2 id="M-EXCUSE-ME"><a href="#M-EXCUSE-ME" class="headerlink" title="M: EXCUSE ME!"></a>M: EXCUSE ME!</h2><h2 id="T-Aggghhh-What-do-you-want-You-scared-the-lift-out-of-time"><a href="#T-Aggghhh-What-do-you-want-You-scared-the-lift-out-of-time" class="headerlink" title="T: Aggghhh! What do you want? You scared the lift out of time!"></a>T: Aggghhh! What do you want? You scared the lift out of time!</h2><h2 id="M-I’d-like-to-cash-a-traveler’s-check-please"><a href="#M-I’d-like-to-cash-a-traveler’s-check-please" class="headerlink" title="M: I’d like to cash a traveler’s check, please."></a>M: I’d like to cash a traveler’s check, please.</h2><h2 id="T-At-this-hour-You-must-be-kidding"><a href="#T-At-this-hour-You-must-be-kidding" class="headerlink" title="T: At this hour? You must be kidding!"></a>T: At this hour? You must be kidding!</h2><h2 id="M-But-it’s-two-in-the-afternoon"><a href="#M-But-it’s-two-in-the-afternoon" class="headerlink" title="M: But it’s two in the afternoon."></a>M: But it’s two in the afternoon.</h2><h2 id="T-That’s-right-and-as-usual-it’s-nap-time-Come-back-at-three-or-four-We-don’t-work-the-same-hours-as-you-do-in-your-country"><a href="#T-That’s-right-and-as-usual-it’s-nap-time-Come-back-at-three-or-four-We-don’t-work-the-same-hours-as-you-do-in-your-country" class="headerlink" title="T: That’s right - and as usual, it’s nap time. Come back at three or four. We don’t work the same hours as you do in your country."></a>T: That’s right - and as usual, it’s nap time. Come back at three or four. We don’t work the same hours as you do in your country.</h2><h2 id="M-But-I-have-to-cash-this-check-I-have-no-cash"><a href="#M-But-I-have-to-cash-this-check-I-have-no-cash" class="headerlink" title="M: But I have to cash this check. I have no cash!"></a>M: But I have to cash this check. I have no cash!</h2><h2 id="D-Don’t-worry-You-won’t-need-any-cash-All-of-Italy-is-asleep-at-the-moment-Zzzzzz…"><a href="#D-Don’t-worry-You-won’t-need-any-cash-All-of-Italy-is-asleep-at-the-moment-Zzzzzz…" class="headerlink" title="D: Don’t worry. You won’t need any cash. All of Italy is asleep at the moment. Zzzzzz….."></a>D: Don’t worry. You won’t need any cash. All of Italy is asleep at the moment. Zzzzzz…..</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mr-Mishima-a-Japanese-tourist-enters-a-bank-in-Milan-Italy-M-Mishima-T-bank-teller&quot;&gt;&lt;a href=&quot;#Mr-Mishima-a-Japanese-tourist-enters-a
      
    
    </summary>
    
      <category term="English" scheme="http://yoursite.com/categories/English/"/>
    
    
  </entry>
  
  <entry>
    <title>Italian Culture</title>
    <link href="http://yoursite.com/post/4206359651.html"/>
    <id>http://yoursite.com/post/4206359651.html</id>
    <published>2018-12-29T13:12:02.000Z</published>
    <updated>2019-01-14T12:55:17.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nbsp-nbsp-nbsp-nbsp-Italy-is-land-of-history-and-culture-And-as-we-all-know-the-ancient-architecture-there-is-breathtaking-Just-as-we-Chinese-are-proud-of-our-history-and-culture-so-are-the-Italians-One-of-their-traditions-is-to-enjoy-a-long-modday-meal-This-lengthy-lunch-can-last-up-to-four-hours-As-you-can-imagine-after-all-the-eating-drinking-and-chatting-they-need-to-take-a-nap"><a href="#nbsp-nbsp-nbsp-nbsp-Italy-is-land-of-history-and-culture-And-as-we-all-know-the-ancient-architecture-there-is-breathtaking-Just-as-we-Chinese-are-proud-of-our-history-and-culture-so-are-the-Italians-One-of-their-traditions-is-to-enjoy-a-long-modday-meal-This-lengthy-lunch-can-last-up-to-four-hours-As-you-can-imagine-after-all-the-eating-drinking-and-chatting-they-need-to-take-a-nap" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;Italy is land of history and culture. And as we all know, the ancient architecture there is breathtaking. Just as we Chinese are proud of our history and culture, so are the Italians. One of their traditions is to enjoy a long modday meal. This lengthy lunch can last up to four hours! As you can imagine, after all the eating, drinking and chatting, they need to take a nap."></a>&nbsp;&nbsp;&nbsp;&nbsp;Italy is land of history and culture. And as we all know, the ancient architecture there is breathtaking. Just as we Chinese are proud of our history and culture, so are the Italians. One of their traditions is to enjoy a long modday meal. This lengthy lunch can last up to four hours! As you can imagine, after all the eating, drinking and chatting, they need to take a nap.</h2><h2 id="nbsp-nbsp-nbsp-nbsp-Well-this-custom-may-be-great-for-the-stomach-but-it’s-not-so-great-for-getting-things-done-If-you-happen-to-be-in-Italy-don’t-be-surprised-if-you-have-to-wait-for-a-long-time-for-the-banks-and-post-offices-to-open"><a href="#nbsp-nbsp-nbsp-nbsp-Well-this-custom-may-be-great-for-the-stomach-but-it’s-not-so-great-for-getting-things-done-If-you-happen-to-be-in-Italy-don’t-be-surprised-if-you-have-to-wait-for-a-long-time-for-the-banks-and-post-offices-to-open" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;Well, this custom may be great for the stomach, but it’s not so great for getting things done. If you happen to be in Italy, don’t be surprised if you have to wait for a long time for the banks and post offices to open."></a>&nbsp;&nbsp;&nbsp;&nbsp;Well, this custom may be great for the stomach, but it’s not so great for getting things done. If you happen to be in Italy, don’t be surprised if you have to wait for a long time for the banks and post offices to open.</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note default"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nbsp-nbsp-nbsp-nbsp-Italy-is-land-of-history-and-culture-And-as-we-all-know-the-ancient-architecture-there-is-breathtaking-Just-as-w
      
    
    </summary>
    
      <category term="English" scheme="http://yoursite.com/categories/English/"/>
    
    
  </entry>
  
  <entry>
    <title>Speaking the Same Language</title>
    <link href="http://yoursite.com/post/499453591.html"/>
    <id>http://yoursite.com/post/499453591.html</id>
    <published>2018-12-28T15:00:38.000Z</published>
    <updated>2019-01-14T12:55:17.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sally-is-talking-with-her-friend-Don-S-Sally-D-Don"><a href="#Sally-is-talking-with-her-friend-Don-S-Sally-D-Don" class="headerlink" title="Sally is talking with her friend, Don.(S=Sally; D=Don)"></a>Sally is talking with her friend, Don.(S=Sally; D=Don)</h2><h2 id="S-Tell-me-Don-How-come-you’re-from-Spain-but-you-can’t-speak-Spanish-very-well"><a href="#S-Tell-me-Don-How-come-you’re-from-Spain-but-you-can’t-speak-Spanish-very-well" class="headerlink" title="S: Tell me, Don. How come you’re from Spain but you can’t speak Spanish very well?"></a>S: Tell me, Don. How come you’re from Spain but you can’t speak Spanish very well?</h2><h2 id="D-It’s-not-my-mother-tongue-My-father-is-Spanish-and-my-mother-is-American-We-usually-speak-English-at-home"><a href="#D-It’s-not-my-mother-tongue-My-father-is-Spanish-and-my-mother-is-American-We-usually-speak-English-at-home" class="headerlink" title="D: It’s not my mother tongue. My father is Spanish and my mother is American. We usually speak English at home."></a>D: It’s not my mother tongue. My father is Spanish and my mother is American. We usually speak English at home.</h2><h2 id="S-Oh-I-see"><a href="#S-Oh-I-see" class="headerlink" title="S: Oh, I see."></a>S: Oh, I see.</h2><h2 id="D-Your-Spanish-is-probably-better-than-mine"><a href="#D-Your-Spanish-is-probably-better-than-mine" class="headerlink" title="D: Your Spanish is probably better than mine."></a>D: Your Spanish is probably better than mine.</h2><h2 id="S-Yes-but-you-speak-English-more-fluently-than-I"><a href="#S-Yes-but-you-speak-English-more-fluently-than-I" class="headerlink" title="S: Yes, but you speak English more fluently than I."></a>S: Yes, but you speak English more fluently than I.</h2><h2 id="D-How-come-Aren’t-you-American"><a href="#D-How-come-Aren’t-you-American" class="headerlink" title="D: How come? Aren’t you American?"></a>D: How come? Aren’t you American?</h2><h2 id="S-Yes-but-my-mother-is-Spanish"><a href="#S-Yes-but-my-mother-is-Spanish" class="headerlink" title="S: Yes, but my mother is Spanish."></a>S: Yes, but my mother is Spanish.</h2><h2 id="D-Don’t-tell-me…"><a href="#D-Don’t-tell-me…" class="headerlink" title="D: Don’t tell me…"></a>D: Don’t tell me…</h2><h2 id="S-That’s-right-We-usually-speak-Spanish-at-home"><a href="#S-That’s-right-We-usually-speak-Spanish-at-home" class="headerlink" title="S: That’s right. We usually speak Spanish at home."></a>S: That’s right. We usually speak Spanish at home.</h2><h2 id="D-It-doesn’t-matter-as-long-as-we-can-communicate"><a href="#D-It-doesn’t-matter-as-long-as-we-can-communicate" class="headerlink" title="D: It doesn’t matter as long as we can communicate."></a>D: It doesn’t matter as long as we can communicate.</h2><h2 id="S-That’s-true"><a href="#S-That’s-true" class="headerlink" title="S: That’s true."></a>S: That’s true.</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note success"><p>赖世雄美语从头学-中级篇（上） </p></div> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Sally-is-talking-with-her-friend-Don-S-Sally-D-Don&quot;&gt;&lt;a href=&quot;#Sally-is-talking-with-her-friend-Don-S-Sally-D-Don&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="English" scheme="http://yoursite.com/categories/English/"/>
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>The Dying Languages</title>
    <link href="http://yoursite.com/post/3018116520.html"/>
    <id>http://yoursite.com/post/3018116520.html</id>
    <published>2018-12-28T14:58:22.000Z</published>
    <updated>2019-01-14T12:55:17.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nbsp-nbsp-nbsp-nbsp-Today-more-people-than-ever-before-are-speaking-to-each-other-through-satellite-television-cellular-telephones-and-computers-This-means-that-people-from-different-parts-of-the-world-need-to-be-able-to-communicate-in-the-same-langulage-That-language-happens-to-be-English"><a href="#nbsp-nbsp-nbsp-nbsp-Today-more-people-than-ever-before-are-speaking-to-each-other-through-satellite-television-cellular-telephones-and-computers-This-means-that-people-from-different-parts-of-the-world-need-to-be-able-to-communicate-in-the-same-langulage-That-language-happens-to-be-English" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;Today, more people than ever before are speaking to each other through satellite television, cellular telephones and computers. This means that people from different parts of the world need to be able to communicate in the same langulage. That language happens to be English."></a>&nbsp;&nbsp;&nbsp;&nbsp;Today, more people than ever before are speaking to each other through satellite television, cellular telephones and computers. This means that people from different parts of the world need to be able to communicate in the same langulage. That language happens to be English.</h2><h2 id="nbsp-nbsp-nbsp-nbsp-Because-of-this-experts-have-predicted-that-more-than-half-of-the-world’s-6-000-languages-may-die-out-in-the-next-century-Already-almost-all-Californian-Native-American-languages-are-in-danger-of-extinction-They-are-being-swallowed-up-by-English-and-other-languages-It-is-a-pity-but-that-is-one-of-the-prices-of-modernization"><a href="#nbsp-nbsp-nbsp-nbsp-Because-of-this-experts-have-predicted-that-more-than-half-of-the-world’s-6-000-languages-may-die-out-in-the-next-century-Already-almost-all-Californian-Native-American-languages-are-in-danger-of-extinction-They-are-being-swallowed-up-by-English-and-other-languages-It-is-a-pity-but-that-is-one-of-the-prices-of-modernization" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;Because of this, experts have predicted that more than half of the world’s 6,000 languages may die out in the next century. Already almost all Californian Native American languages are in danger of extinction. They are being swallowed up by English and other languages. It is a pity, but that is one of the prices of modernization."></a>&nbsp;&nbsp;&nbsp;&nbsp;Because of this, experts have predicted that more than half of the world’s 6,000 languages may die out in the next century. Already almost all Californian Native American languages are in danger of extinction. They are being swallowed up by English and other languages. It is a pity, but that is one of the prices of modernization.</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><div class="note success"><p>赖世雄美语从头学-中级篇（上）</p></div> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nbsp-nbsp-nbsp-nbsp-Today-more-people-than-ever-before-are-speaking-to-each-other-through-satellite-television-cellular-telephones-a
      
    
    </summary>
    
      <category term="English" scheme="http://yoursite.com/categories/English/"/>
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
  </entry>
  
</feed>
